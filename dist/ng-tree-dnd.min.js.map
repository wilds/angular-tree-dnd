{"version":3,"sources":["ng-tree-dnd.js"],"names":["fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","restrict","scope","replace","controller","$scope","$element","$attrs","passedExpand","_clone","indent","indent_plus","indent_unit","$tree_class","primary_key","$type","colDefinitions","$globals","$class","tree","treeData","tree_nodes","angular","copy","extend","icon","1","iconExpand","0","iconCollapse","-1","iconLeaf","for_all_descendants","node","fn","parent","checkSibling","isFunction","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","selected_node","getElementChilds","element","querySelector","onClick","isDefined","on_click","onSelect","select_node","toggleExpand","fnCallback","$callbacks","expand","__expanded__","_fnGetHash","__parent__","getHash","setHash","_hashKey","isUndefinedOrNull","__hashKey__","accept","dropEnabled","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","changeKey","_key","__uid__","Math","random","__selected__","clone","this","remove","_this","delayReload","temp","splice","__index__","reload_data","clearInfo","__inited__","__visible__","add","pos","push","deleteScope","_hash","setScope","getScope","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","dragStop","info","passed","changed","drag","target","dropped","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","isMove","dragStart","event","dragMove","setDragging","dragInfo","enableMove","val","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","__parent_real__","getNode","index","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","hiddenChild","nodeScope","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","timeReloadData","tmpTreeData","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","test","trim","getExpandOn","expandOn","expandingProperty","$tree","getColDefs","colDefs","isArray","orderBy","filters","_passed","_iF","_keysF","Object","keys","_lenF","enabledFilter","option","isObject","filterOptions","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","check_exist_attr","generateWatch","$watch","equals","timeLoadData","attrs","existAttr","isAnd","isUndefined","exist","for_each_attrs","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","indexOf","_firstNode","_keys","_regex","RegExp","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","expandLevel","__index_real__","__level__","__icon__","__icon_class__","__dept__","init_data","data","oData","_data","_tree_nodes","columnDefs","filter","updateLimit","$TreeLimit","compile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","then","response","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","templateUrl","getPath","fnInitTreeDnDViewport","$q","updateTimeout","renderTime","viewport","isUpdating","isRender","updateAgain","items","$initViewport","setViewport","getViewport","updateDelayed","getItems","eWindow","on","update","width","prop","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","recursivePromise","number","cancel","module","constant","nodes","handle","directive","link","new_val","compileReplace","replaceWith","$node_class","childsElem","enabledDnD","keyNode","treeDndNode","first","getData","getScopeNode","objexpr","objprops","keyO","lenO","hashKey","skipAttr","keepAttr","lenKeep","join","newVal","oldVal","nodeOf","parentReal","_childs","$on","$nodes_class","$inject","factory","line2tree","parentKey","callback","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","containKey","_copy","_child","_tree","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","$injector","name","has","scopes","path","$id","movePath","copyPath","$filter","options","keyChild","_filter","_fnConvert","_state","_fnBeforeClear","_fnAfter","filter_index","_fnBefore","fieldChild","parentPassed","_nodePassed","_childPassed","_filter_index","_fnCheck","err","_fnProccess","condition","conditions","for_each_filter","_iO","_keysO","_lenO","_callback","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","__filtered_index__","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnDragMove","$params","_$scope","dragStarted","preventDefault","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","document_height","document_width","offsetEdge","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_scope","_target","fnSwapTree","targetX","targetY","isChanged","isVeritcal","_info","_drag","_drop","treeScope","isHolder","_offset","_fnPlaceHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","dragDelaying","_fnDragEnd","$$apply","_status","clearData","_fnBindDrag","unbind","dragEndEvent","dragMoveEvent","dragCancelEvent","_fnDragStartEvent","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","toLowerCase","_tbody","_frag","_width","_needCollapse","_copied","createDocumentFragment","bind","max","scrollHeight","offsetHeight","scrollWidth","offsetWidth","_fnDragStart","dragTimer","bindDrag","dragEnd","keydownHandler","keyCode","shiftKey","_fnKeydownHandler","keyupHandler","_fnKeyupHandler","fnSetCollapse","fnSetExpand","expand_all_parents","on_select","deselect_node","get_parent","for_all_ancestors","collapse_all_parents","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"CA+BA,WACI,aA4QJ,SAASA,EAAcC,EAAUC,EAAOC,EAAUC,EAAQC,EAASC,EAAWC,EACvDC,EAAkBC,EAAeC,EAAgBC,EAAgBC,GACpF,OACIC,SAAY,IACZC,OAAY,EACZC,SAAY,EACZC,YAAa,SAAU,WAAY,SAIvC,SAAsBC,EAAQC,EAAUC,GAkGpC,IAAIC,EAAcC,EAjGlBJ,EAAOK,OAAc,GACrBL,EAAOM,YAAc,GACrBN,EAAOO,YAAc,KACrBP,EAAOQ,YAAc,QACrBR,EAAOS,YAAc,UAErBT,EAAOU,MAAiB,UAExBV,EAAOW,kBACPX,EAAOY,YACPZ,EAAOa,UAEbb,EAAOc,QACDd,EAAOe,YACPf,EAAOgB,cAEPhB,EAAOa,OAASI,QAAQC,KAAK1B,GAC7ByB,QAAQE,OACJnB,EAAOa,OAAOO,MACVC,EAAMnB,EAAOoB,YAAc,4BAC3BC,EAAMrB,EAAOsB,cAAgB,2BAC7BC,KAAMvB,EAAOwB,UAAY,6BAMjC1B,EAAO2B,oBAAsB,SAAUC,EAAMC,EAAIC,EAAQC,GACrD,GAAId,QAAQe,WAAWH,GAAK,CACxB,IAAII,EAAIC,EAAMC,EAEd,GAAIN,EAAGD,EAAME,GAET,OAAO,EAIX,IAFAK,EAASP,EAAKQ,aACdF,EAASC,EAASA,EAAOE,OAAS,EAC7BJ,EAAK,EAAGA,EAAKC,EAAMD,IACpB,IAAKjC,EAAO2B,oBAAoBQ,EAAOF,GAAKJ,EAAID,KAAUG,EAEtD,OAAO,EAKnB,OAAO,GAGX/B,EAAOsC,kBAAoB,SAAUV,GACjC,IAAIW,EAAYC,EAIhB,OAHKZ,IACDA,IAAO5B,EAAOc,MAAOd,EAAOc,KAAK2B,gBAExB,IAATb,IAIM,KADVY,EAAIZ,EAAKQ,aAAaC,QAEXT,GAEPW,EAAaX,EAAKQ,aAAaI,EAAI,GAC5BxC,EAAOsC,kBAAkBC,MAIxCvC,EAAO0C,iBAAmB,WACtB,OAAOzB,QAAQ0B,QAAQ1C,EAAS,GAAG2C,cAAc,sBAGrD5C,EAAO6C,QAAU,SAAUjB,GACnBX,QAAQ6B,UAAU9C,EAAOc,OAASG,QAAQe,WAAWhC,EAAOc,KAAKiC,WAKzD/C,EAAOc,KAAKiC,SAASnB,IAMrC5B,EAAOgD,SAAW,SAAUpB,GACpBX,QAAQ6B,UAAU9C,EAAOc,OACrBc,IAAS5B,EAAOc,KAAK2B,eACrBzC,EAAOc,KAAKmC,YAAYrB,IAcpC5B,EAAOkD,aAAe,SAAUtB,EAAMuB,GAClChD,GAAe,EACXc,QAAQe,WAAWmB,KAAgBA,EAAWvB,GAC9CzB,GAAe,EACRc,QAAQe,WAAWhC,EAAOoD,WAAWC,UAAYrD,EAAOoD,WAAWC,OAAOzB,KACjFzB,GAAe,GAGfA,GACIyB,EAAKQ,aAAaC,OAAS,IAC3BT,EAAK0B,cAAgB1B,EAAK0B,eAMtC,IAAIC,EAAgB,SAAU3B,GACtB,MAAO,IAAMA,EAAK4B,WAAa,IAAM5B,EAAK5B,EAAOS,cASzDT,EAAOyD,QAAaF,EACpBvD,EAAOoD,YACHK,QAAqBF,EACrBG,QAVgB,SAAU9B,GACtB,IAAI+B,EAAWJ,EAAW3B,GAI1B,OAHIX,QAAQ2C,kBAAkBhC,EAAKiC,cAAgBjC,EAAKiC,cAAgBF,KACpE/B,EAAKiC,YAAcF,GAEhB/B,GAMXD,oBAAqB3B,EAAO2B,oBAI5BmC,OAAqB,WACjB,OAA8B,IAAvB9D,EAAO+D,aAElBC,WAAqB,SAAUC,EAAOC,EAAUC,GAC5C,IAAIC,EAAO,EACPC,EAAOF,EAAW,EAAInE,EAAOM,YAKjC,OAJK4D,IACDE,EAAOpE,EAAOO,YAAcP,EAAOO,YAAc,MAGjD0D,EAAQ,EAAI,EACLI,EAAOD,EAEPpE,EAAOK,QAAU4D,EAAQ,GAAKI,EAAOD,GAGpDE,UAAqB,WACjB,OAA8B,IAAvBtE,EAAO+D,aAElBQ,UAAqB,WACjB,OAA8B,IAAvBvE,EAAOwE,aAElBC,WAAqB,WACjB,OAAO,GAEXC,UAAqB,SAAU9C,GAC3B,IAAI+C,EAAW/C,EAAKgD,QACpBhD,EAAKgD,QAAUC,KAAKC,SAChBlD,EAAKmD,qBACEnD,EAAKmD,aAGW,YAAvB/E,EAAOS,cAEPkE,GADAA,EAAO,GAAK/C,EAAK5B,EAAOS,cACZX,QAAQ,SAAU,IAAM,KAAO8B,EAAKgD,QAEhDhD,EAAK5B,EAAOS,aAAekE,IAInCK,MAAqB,SAAUpD,GAG3B,OAFAxB,EAASa,QAAQC,KAAKU,GACtBqD,KAAKtD,oBAAoBvB,EAAQ6E,KAAKP,WAC/BtE,GAEX8E,OAAqB,SAAUtD,EAAME,EAAQqD,EAAOC,GAChD,IAAIC,EAAOvD,EAAOwD,OAAO1D,EAAK2D,UAAW,GAAG,GAI5C,OAHKH,GACDpF,EAAOwF,cAEJH,GAEXI,UAAqB,SAAU7D,UACpBA,EAAK8D,kBACL9D,EAAK+D,aAKhBC,IAAqB,SAAUhE,EAAMiE,EAAK/D,GAEtCmD,KAAKtD,oBAAoBC,EAAMqD,KAAKQ,WAChC3D,IACIA,EAAOO,QAAU,GACbwD,GAAO,EACP/D,EAAOwD,OAAOO,EAAK,EAAGjE,GAM1BE,EAAOgE,KAAKlE,MAM5B5B,EAAO+F,YAAc,SAAUlG,EAAO+B,GAClC,IAAIoE,EAAQpE,EAAKiC,YACb7D,EAAOY,SAASoF,IAAUhG,EAAOY,SAASoF,KAAWnG,UAC9CG,EAAOY,SAASoF,IAI/BhG,EAAOiG,SAAW,SAAUpG,EAAO+B,GAC/B,IAAIoE,EAAQpE,EAAKiC,YACb7D,EAAOY,SAASoF,KAAWnG,IAC3BG,EAAOY,SAASoF,GAASnG,IAIjCG,EAAOkG,SAAW,SAAUtE,GACxB,GAAIA,EAAM,CACN,IAAIoE,EAAQpE,EAAKiC,YAEjB,OAAO7D,EAAOY,SAASoF,GAE3B,OAAOhG,IAGPE,EAAOiG,YAAcjG,EAAOkG,cAC5BpG,EAAOqG,SAAc,KAErBrG,EAAOwE,YAAc,KACrBxE,EAAO+D,YAAc,KACrB/D,EAAOsG,WAAc,KAEjBpG,EAAOiG,aAEPnG,EAAOuG,UAAkB,EACzBvG,EAAOwG,aAAkB,EACzBxG,EAAOyG,YAAkB,EACzBzG,EAAO0G,eAAkB,EACzB1G,EAAO2G,gBAAkB,KACzB3G,EAAO4G,UAAkB,KACzB5G,EAAO6G,SAAkB,KAEzB5F,QAAQE,OACJnB,EAAOoD,YACH0D,WAAY,WACR,OAAO,GAEXC,SAAY,SAAUC,EAAMC,GACxB,IAAKD,IAASA,EAAKE,SAAWF,EAAKG,KAAKX,cAAgBS,EACpD,OAAO,KAGXD,EAAKI,OAAO5B,cAERwB,EAAKI,SAAWJ,EAAKG,MAAQH,EAAKG,KAAKX,aACvCQ,EAAKG,KAAK3B,eAGlB6B,QAAY,SAAUL,GAClB,IAAKA,EACD,OAAO,KAGX,IAAIM,EAAgBN,EAAKpF,KACrB2F,EAAgB,KAChBC,EAAgBR,EAAKS,KACrBC,EAAgB,KAChBC,EAAgBX,EAAKlF,QAAUkF,EAAKG,KAAKpG,SACzC6G,EAAgBJ,EAAM1F,QAAUkF,EAAKI,OAAOrG,SAC5C8G,EAAgBb,EAAKG,KAAKX,YAE9B,SAAKQ,EAAKE,SAAWW,OAIjBb,EAAKI,OAAOhE,WAAWU,OAAOkD,EAAMA,EAAKS,KAAMT,EAAKE,WAChDW,GACAH,EAAUC,EACN1G,QAAQ6B,UAAU4E,EAAQtF,gBAC1BsF,EAAUA,EAAQtF,cAGtBmF,EAAWP,EAAKG,KAAK/D,WAAW8B,OAC5BoC,EACAI,EACAV,EAAKG,KAAK/D,YACV,IAGJmE,EAAWP,EAAKG,KAAK/D,WAAW4B,MAAMsC,EAAON,EAAKG,KAAK/D,YAKvDyE,GACAb,EAAKG,OAASH,EAAKI,QACnBO,IAAkBC,GAClBJ,EAAM3B,KAAOmB,EAAKpF,KAAK2D,WACvBiC,EAAM3B,OAGV6B,EAAUE,GACExF,eACRsF,EAAUA,EAAQtF,cAGtB4E,EAAKI,OAAOhE,WAAWwC,IACnB2B,EACAC,EAAM3B,IACN6B,EACAV,EAAKG,KAAK/D,aAGP,KAKf0E,UAAY,SAAUC,KAEtBC,SAAY,SAAUD,OAK9B/H,EAAOiI,YAAc,SAAUC,GAC3BlI,EAAO6G,SAAWqB,GAGtBlI,EAAOmI,WAAa,SAAUC,GAEtBpI,EAAOwG,YADQ,kBAAR4B,GACcA,GAMzBlI,EAAOmI,eACPrI,EAAOsI,eAAgB,EAEvBtI,EAAOuI,WAAa,WACZvI,EAAO4G,WACP5G,EAAO4G,UAAU4B,SAASxI,EAAOa,OAAO4H,SAIhDzI,EAAO0I,cAAgB,WACnB,GAAK1I,EAAO6G,UAIR7G,EAAOsI,cAAe,CACtB,IAAIK,EAAe3I,EAAO4G,UACtB5G,EAAOwG,YACPxG,EAAO4G,UAAY3F,QAAQ0B,QAAQpD,EAAiBqJ,QAAQ5I,IAE5DA,EAAO4G,UAAY3F,QAAQ0B,QAAQpD,EAAiBsJ,QAAQ7I,IAG5D2I,IAAiB3I,EAAO4G,YACpB+B,IACA3I,EAAO4G,UAAUkC,KAAK,QAASH,EAAaG,KAAK,UACjD9I,EAAO4G,UAAUkC,KAAK,QAASH,EAAaG,KAAK,UACjDH,EAAazD,UAEjB7F,EAAU0J,KAAK,QAAQC,OAAOhJ,EAAO4G,YAIzC5G,EAAO4G,UAAUqC,YAAYjJ,EAAOa,OAAO4H,UAInDzI,EAAOkJ,kBAAoB,SAAUC,GAC7BnJ,EAAO4G,YACP5G,EAAO4G,UAAUwC,KAETC,KAAWF,EAAEG,MAAQ,GAAK,KAC1BC,IAAWJ,EAAEK,MAAQ,GAAK,KAC1BC,UAAW,OAGnBzJ,EAAO4G,UAAU4B,SAASxI,EAAOa,OAAO6I,YAMxD1J,EAAO2J,WAAY,EAEnB3J,EAAO4J,eAAiB,SAAUhI,GAC9B,GAAIA,GAAQA,EAAK2D,UAAY,EAAG,CAC5B,IAAasE,EAASjI,EAAK2D,UAAY,EAEvC,OAAItE,QAAQ6B,UAAUlB,EAAKkI,iBACb9J,EAAOgB,WAAWY,EAAKkI,iBAClB1H,aAAayH,GAEzB7J,EAAOe,SAAS8I,GAG3B,OAAO,MAGX7J,EAAO+J,QAAU,SAAUC,GACvB,OAAI/I,QAAQ2C,kBAAkBoG,GACnB,KAEJhK,EAAOgB,WAAWgJ,IAG7BhK,EAAOiK,UAAY,SAAUtH,EAASuH,GAElC,IAAKlK,EAAOqG,SACR,GAAIrG,EAAOmK,QAAS,CAChBnK,EAAOqG,SAAWpF,QAAQ0B,QAAQvD,EAAQgL,SAASC,cAAc,OACjE,IAAIC,EAActK,EAAOW,eAAe0B,OAOxC,IANArC,EAAOqG,SAAS2C,OACZ/H,QAAQ0B,QAAQvD,EAAQgL,SAASC,cAAc,OAC1C7B,SAASxI,EAAOa,OAAO0J,OACvB/B,SAAS,YACTA,SAASxI,EAAOa,OAAO2J,QAEzBF,KAAc,GACjBtK,EAAOqG,SAAS2C,OACZ/H,QAAQ0B,QAAQvD,EAAQgL,SAASC,cAAc,OAC1C7B,SAASxI,EAAOa,OAAO0J,OACvB/B,SAASxI,EAAOa,OAAO2J,aAIpCxK,EAAOqG,SAAWpF,QAAQ0B,QAAQvD,EAAQgL,SAASC,cAAc,OAC5D7B,SAASxI,EAAOa,OAAO0J,OACvB/B,SAASxI,EAAOa,OAAO2J,OAepC,OAVIN,GACAlK,EAAOqG,SAAS+C,IAAI,SAAU3J,EAAegL,OAAOP,GAAW,MAG/DvH,EACAA,EAAQ,GAAG+H,WAAWC,aAAa3K,EAAOqG,SAAS,GAAI1D,EAAQ,IAE/D3C,EAAO0C,mBAAmBsG,OAAOhJ,EAAOqG,UAGrCrG,EAAOqG,UAGlBrG,EAAO4K,UAAY,WACX5K,EAAOqG,UACPrG,EAAOqG,SAASmC,SAASxI,EAAOa,OAAO4H,SAI/CzI,EAAO6K,UAAY,WACX7K,EAAOqG,UACPrG,EAAOqG,SAAS4C,YAAYjJ,EAAOa,OAAO4H,SAIlDzI,EAAO8K,aAAe,WAClB,OAAO9K,IAKfA,EAAO+K,WAoTP,SAAoBlJ,GAChB,IAAImJ,EAAQ/F,KAAKgG,MAAMC,QACT,WAAVF,GAAgC,YAAVA,EAClBnJ,GAAoB,mBAAPA,GACbA,IAGJoD,KAAKkG,OAAOtJ,IAzTpB7B,EAAOoL,YAAc,SAAuBxJ,EAAME,GAC9C,IAAIuJ,EAAYrL,EAAOkG,SAAStE,GAmBhC,OAlBIyJ,EACIvJ,GAAUA,EAAOwB,cAAgBxB,EAAO6D,aACxC0F,EAAUpL,SAASgJ,YAAYjJ,EAAOa,OAAO4H,QAC7C7G,EAAK+D,aAAc,IAEnB0F,EAAUpL,SAASuI,SAASxI,EAAOa,OAAO4H,QAC1C7G,EAAK+D,aAAc,GAInB7D,GAAUA,EAAOwB,cAAgBxB,EAAO6D,YACxC/D,EAAK+D,aAAc,EAEnB/D,EAAK+D,aAAc,GAKE,IAAtB/D,EAAK0B,cAGhB,IAAIgI,EACAC,EACAC,EAyJAC,EACAC,EAAGC,EACHC,EACAC,EAAQC,EAAQC,EAAWC,EAASC,EAAOC,EAASC,EAGpDC,EAAgBC,EA9JhBC,GACIC,YAAY,EACZC,WAAY,EACZC,UAAY,GAGhBC,IAEQ,eAEK,UAAW,eAAgB,KAAM,kBACjC,UAAW,aAAc,KAAM,gBAC/B,SAAU,YAAa,EAAG,KAAM,IAChC,UAAW,iBAAkB,KAAM,oBACnC,UAAW,eAAgB,KAAM,gBAAiB,KAAM,SAAUC,GAE3D3M,EAAOwG,aADPmG,GAGqB3M,EAAOyG,iBAMvC,aAAc,kBACd,SAAU,eAAgBvG,EAAO0M,aAAc,eAAgB,KAAM,SAAUC,GACxEA,GAAQvN,EAAewN,IAAID,IAC3BtN,EAAiBwN,QAAQF,EAAM7M,MAGtC,SAAU,eAAgBE,EAAO8M,aAAc,eAAgB,KAAM,SAAUH,GACxEA,GAAQvN,EAAewN,IAAID,IAC3BtN,EAAiB0N,QAAQJ,EAAM7M,UAKrC,aAAc,iBACf,SAAU,aAAc,GAAI,aAAc,OAG3C,MACC,UAAW,aAAa,EAAM,YAAa,OAC3C,UAAW,eACX,WAAY,YAAa,SAAUoI,GAChC,cAAeA,GACX,IAAK,SACDpI,EAAOQ,YAAc4H,EACrB,MACJ,IAAK,SACDnH,QAAQE,OAAOnB,EAAOa,OAAQuH,GAC9BpI,EAAOQ,YAAcR,EAAOa,OAAOC,KACnC,MACJ,QACId,EAAOQ,YAAcN,EAAOgN,YAGrC,YAAa,WACZlN,EAAOQ,YAAcR,EAAOa,OAAOC,KAAO,UAC3C,KAAM,WACL,GAAI,sBAAsBqM,KAAK,IAAMjN,EAAOgN,WAExC,OADAlN,EAAOQ,YAAcN,EAAOgN,UAAUE,QAC/B,MAIV,SAAU,UAAW,WAAYC,EAAa,oBAAqBA,EACpE,SAAUC,GACFrM,QAAQ2C,kBAAkB0J,KAC1BtN,EAAOuN,kBAAoBrN,EAAOoN,aAG7C,SAAU,cAAerM,QAAQ6B,UAAU9C,EAAOc,MAAQd,EAAOc,QACjE,OAAQ,KAAM,SAAU0M,GAEhBvM,QAAQe,WAAWwJ,KACpBA,EAAgB9L,EAAe,oBAG/BuB,QAAQe,WAAWwJ,IACZvK,QAAQE,OACXqM,EACAhC,EAAcxL,QAKrB,QAAS,UAAW,aAAcyN,EAAY,iBAAkBA,EACjE,SAAUC,IACFzM,QAAQ2C,kBAAkB8J,IAAazM,QAAQ0M,QAAQD,KACvD1N,EAAOW,eAAiB8M,SAI/B,SAAU,SAAU,QAAS,YAAa,UAAWvN,EAAO0N,WAG5D,SAAU,SAAU,SAAU,KAAM,SAAU,KAAM,SAAUC,GAC/D,IAAIC,GAAU,EACd,GAAI7M,QAAQ6B,UAAU+K,KAAa5M,QAAQ0M,QAAQE,GAAU,CACzD,IAC4BE,EADxBC,EAASC,OAAOC,KAAKL,GACrBM,EAASH,EAAO3L,OAEpB,GAAI8L,EAAQ,EACR,IAAKJ,EAAM,EAAGA,EAAMI,EAAOJ,IAEvB,GAAoC,iBAAzBF,EAAQG,EAAOD,KACU,IAAhCF,EAAQG,EAAOD,IAAM1L,OADzB,CAIAyL,GAAU,EACV,OAKZ9N,EAAOoO,cAAgBN,EACvBtI,OAGA,SAAU,gBAAiB8G,EAAsB,gBACjDA,EAAsB,SAAU+B,GAC5BpN,QAAQqN,SAASD,KACjBrO,EAAOuO,cAAgBtN,QAAQE,OAAOmL,EAAsB+B,OAGnE,SAAU,aAAcnO,EAAOsO,WAAY,cAAe,YAC1D,SAAU,aAActO,EAAOuO,WAAY,gBAC3C,SAAU,SAAU,GAAI,KAAM,KAC9B,SAAU,aAAc,GAAI,KAAM,KAClC,OAAQ,YAAa,SAAUC,GAU5B,OATAzN,QAAQ0N,QACJD,EAAc,SAAUE,EAAOC,GACN,mBAAVD,GACH5O,EAAOoD,WAAWyL,KAClB7O,EAAOoD,WAAWyL,GAAOD,KAKlC5O,EAAOoD,YAEjB,eAEA,SAAU,cAAe,EAAG,cAAe,EAAG,WAC3CoC,OAEH,SAAU,YAAa,IAAK,aAAc,MAC1C,UAAW,aAAc,KAAM,gBAC/B,UAAW,aAAc,KAAM,kBAGrCsJ,EAAoBpC,EAASrK,OAQpC,IAAKoJ,EAAI,EAAGA,EAAIqD,EAAMrD,IAElB,GAAKsD,EAAiB7O,EAAQwM,EAASjB,GAAG,IAAI,GAI9C,IADAG,EAAQc,EAASjB,GAAG,GACfC,EAAI,EAAGC,EAAMC,EAAMvJ,OAAQqJ,EAAIC,EAAKD,IACrCG,EAAYD,EAAMF,GAAG,GACrBI,EAAYF,EAAMF,GAAG,GACrBK,EAAYH,EAAMF,GAAG,GACrBM,EAAYJ,EAAMF,GAAG,GACrBO,EAAYL,EAAMF,GAAG,GACrBQ,EAAYN,EAAMF,GAAG,GACrBS,EAAYP,EAAMF,GAAG,GACrBsD,EAAcnD,EAAQC,EAAQC,EAAWC,EAASC,EAAOC,EAASC,GAItEjM,EAAOa,UACPf,EAAOiP,OACH/O,EAAOa,SAAU,SAAUqH,GACnBnH,QAAQiO,OAAO9G,EAAKpI,EAAOe,YAI/BsL,EAAcjE,EACVnH,QAAQ2C,kBAAkBwI,KAC1BA,EAAiBpN,EAASmQ,EAAc,SAE7C,GAIX,SAASA,IACLnP,EAAOe,SAAWsL,EAClB7G,IACA4G,EAAiB,KAUrB,SAAS2C,EAAiBK,EAAOC,EAAWC,GACxC,OAAIrO,QAAQ2C,kBAAkByL,KAIZ,MAAdA,IAAsBpO,QAAQsO,YAAYH,EAAMC,MAIhDpO,QAAQ0M,QAAQ0B,GAKxB,SAAwBD,EAAOI,EAAOF,GAClC,IAAI5D,EAAGC,EAAM6D,EAAMnN,OAAQ4E,GAAS,EAEpC,GAAY,IAAR0E,EACA,OAAO,KAEX,IAAKD,EAAI,EAAGA,EAAIC,EAAKD,IACjB,GAAIqD,EAAiBK,EAAOI,EAAM9D,IAAK4D,IAEnC,GADArI,GAAS,GACJqI,EACD,OAAO,OAGX,GAAIA,EACA,OAAO,EAKnB,OAAOrI,EAvBIwI,CAAeL,EAAOC,EAAWC,QAD5C,IA2BJ,SAASN,EAAcU,EAAMC,EAAUC,EAAYC,EAAWC,EAAYC,EACnDC,GAEnB,GADAH,EAAYA,GAAaF,EACL,iBAATD,GAAqBzO,QAAQ0M,QAAQ+B,GAAO,CACnD,GAAIzO,QAAQe,WAAWgO,IAAaA,IAChC,OAE4B,iBAArB9P,EAAOyP,GACd3P,EAAOiP,OACH/O,EAAOyP,GAAW,SAAUvH,GACJ,iBAATsH,UAA4BtH,IAAQsH,GAC3CzO,QAAQ0M,QAAQ+B,IAASA,EAAKO,eAAe7H,IAAQ,EAErDpI,EAAO6P,GAAazH,EAEhBnH,QAAQe,WAAW4N,GACnB5P,EAAO6P,GAAaD,EAAWxH,GAE/BpI,EAAO6P,GAAaD,EAIxB3O,QAAQe,WAAW+N,IACnBA,EAAQ/P,EAAO6P,GAAY7P,KAEhC,GAIHiB,QAAQe,WAAW8N,GACnB9P,EAAO6P,GAAaC,IACZ7O,QAAQsO,YAAYO,KAC5B9P,EAAO6P,GAAaC,IAiBpC,SAASzC,IACL,GAAIrN,EAAOe,UAAYf,EAAOe,SAASsB,OAAQ,CAC3C,IAEIH,EACAwJ,EAHAwE,EAAalQ,EAAOe,SAAS,GAAIoP,EAAQlC,OAAOC,KAAKgC,GACrDE,EAAyC,IAAIC,OAAO,0BAIxD,IAAK3E,EAAI,EAAGxJ,EAAOiO,EAAM9N,OAAQqJ,EAAIxJ,EAAMwJ,IACvC,GAAoC,iBAAzBwE,EAAWC,EAAMzE,MAAqB0E,EAAOjD,KAAKgD,EAAMzE,IAE/D,YADA1L,EAAOuN,kBAAoB4C,EAAMzE,IAMrCzK,QAAQ2C,kBAAkB5D,EAAOuN,qBACjCvN,EAAOuN,kBAAoB4C,EAAM,KAM7C,SAAS1C,IAEL,GAAIzN,EAAOe,SAASsB,OAAQ,CACxB,IAGIqJ,EAAGxJ,EAHHoO,KAAgBJ,EAAalQ,EAAOe,SAAS,GAC7CqP,EAA6B,IAAIC,OAAO,4BAA+BrQ,EAAOuN,kBAAoB,MAClG4C,EAA6BlC,OAAOC,KAAKgC,GAG7C,IAAKxE,EAAI,EAAGxJ,EAAOiO,EAAM9N,OAAQqJ,EAAIxJ,EAAMwJ,IACH,iBAAzBwE,EAAWC,EAAMzE,KAAqB0E,EAAOjD,KAAKgD,EAAMzE,KAC/D4E,EAAUxK,MAEFyK,MAAOJ,EAAMzE,KAK7B1L,EAAOW,eAAiB2P,GAIhC,SAASE,EAAKC,EAAM7O,EAAME,EAAQ4O,EAAazM,EAAO0M,EAAS3G,GAE3D,GAAoB,iBAATpI,EACP,OAAO,EAGX,IAAIK,EAAIC,EAAM0O,EAAOC,EAAaC,EAAOnN,EA8CzC,GA7CK1C,QAAQ0M,QAAQ/L,EAAKQ,gBACtBR,EAAKQ,iBAGTR,EAAKkI,gBAAkB4G,EACvB9O,EAAK4B,WAAkB1B,EACvBI,EAAuBN,EAAKQ,aAAaC,OAErCpB,QAAQ2C,kBAAkBhC,EAAK0B,eAAiBpB,EAAO,IACvDN,EAAK0B,aAAeW,EAAQjE,EAAO+Q,aAInCH,EADS,IAAT1O,GACS,EAELN,EAAK0B,aACG,EAEA,EAKhBuN,EAAsBJ,EAAKpO,OAC3BT,EAAK2D,UAAiByE,EACtBpI,EAAKoP,eAAiBH,EACtBjP,EAAKqP,UAAiBhN,EACtBrC,EAAKsP,SAAiBN,EACtBhP,EAAKuP,eAAiBnR,EAAOa,OAAOO,KAAKwP,GACzChP,EAAK+D,cAAmBgL,EAEpB1P,QAAQ2C,kBAAkBhC,EAAKgD,WAC/BhD,EAAKgD,QAAU,GAAKC,KAAKC,UAG7BnB,EAAW3D,EAAOyD,QAAQ7B,IAEtBX,QAAQ2C,kBAAkBhC,EAAKiC,cAAgBjC,EAAKiC,cAAgBF,KACpE/B,EAAKiC,YAAcF,GAGvB8M,EAAK3K,KAAKlE,GAGVkP,EAAQ,EACJ5O,EAAO,EACP,IAAKD,EAAK,EAAGA,EAAKC,EAAMD,IACpB6O,GAASN,EACLC,EACA7O,EAAKQ,aAAaH,GAClBL,EAAK5B,EAAOS,aACZoQ,EACA5M,EAAQ,EACR0M,GAAW/O,EAAK0B,aAChBrB,GAOZ,OAFAL,EAAKwP,SAAWN,EAETA,EAGX,SAASO,EAAUC,GAQf,OALIrQ,QAAQ6B,UAAU9C,EAAOgB,oBAClBhB,EAAOgB,WAGlBhB,EAAOgB,WAAasQ,EACbA,EAGX,SAAS9L,EAAY+L,GACjB,IAAIC,EACAtP,EACAuP,KACJ,GAAIxQ,QAAQ6B,UAAUyO,GAAQ,CAC1B,IAAKtQ,QAAQ0M,QAAQ4D,IAA2B,IAAjBA,EAAMlP,OACjC,OAAOgP,MAEPG,EAAQD,MAET,CAAA,IAAKtQ,QAAQ0M,QAAQ3N,EAAOe,WAAwC,IAA3Bf,EAAOe,SAASsB,OAC5D,OAAOgP,MAEPG,EAAQxR,EAAOe,SAgCnB,GA7BKb,EAAOoN,UACRD,IAGCnN,EAAOwR,YACRjE,IAGAxM,QAAQ6B,UAAU9C,EAAO4N,WACpB3M,QAAQe,WAAWuJ,KACpBA,EAAiB7L,EAAe,oBAGhCuB,QAAQe,WAAWuJ,KACnBiG,EAAQjG,EAAeiG,EAAOxR,EAAO4N,WAIzC3M,QAAQ6B,UAAU9C,EAAO2R,UACpB1Q,QAAQe,WAAWsJ,KACpBA,EAAgB5L,EAAe,mBAG/BuB,QAAQe,WAAWsJ,KACnBkG,EAAQlG,EAAckG,EAAOxR,EAAO2R,OAAQ3R,EAAOuO,kBAI3DrM,EAAOsP,EAAMnP,QACF,EAAG,CACV,IAAIJ,EAGJ,IAAKA,EAAK,EAAGA,EAAKC,EAAMD,IACNuO,EAAKiB,EAAaD,EAAMvP,GAAK,KAAM,KAAM,GAAG,EAAMA,GAOxE,OAFAoP,EAAUI,GAEHA,EAlRXzR,EAAO4R,YAAc,WAEjB5R,EAAO6R,YAAc,IAGzB7R,EAAOwF,YAAcA,IAxsBrBsM,QAy9BJ,SAAmBC,GAEf,IAAIC,EAAa,GACbC,EAAaF,EAASG,OAAO9E,OAE7B6E,EAAS5P,OAAS,IAClB2P,EAAaC,EACbF,EAASG,KAAK,KAGlB,OAAO,SAAgBrS,EAAO8C,EAASyM,GAEnC,GAAIA,EAAMjJ,WAAY,CAClB,IAAIgM,EAAczS,EAAe,gBAC7BuB,QAAQe,WAAWmQ,IACnBA,EAAYtS,EAAO8C,EAASvD,EAASC,GAK7CsD,EAAQyP,MAAM,WAEV,SAASC,EAAeC,EAAUzS,GAC9B,IACI0S,EADAC,EAAWF,EAAS,GAAG1P,cAAc,mBAIzC,GADA/C,EAAMsK,QAAU,KACZqI,EAAJ,CAOA,GANIA,EAAcvR,QAAQ0B,QAAQ6P,GAC9BD,EAAcC,EAAS1J,KAAK,cAKf,CACb,IAAI2J,EAActT,EAAOoT,EAAPpT,CAAoBU,IAAU0S,EAChD,GAA2B,iBAAhBE,EACP,OAAOxT,EAAM6N,IACT2F,GACCC,MAAOpT,IACVqT,KAAK,SAAUC,GACT,IAAItB,EAAgBsB,EAAStB,MAAQ,GACrCA,EAAoBA,EAAKlE,OAEzB,IAAIyF,EAAgBzI,SAASC,cAAc,OAC3CwI,EAAQC,UAAYxB,EACpBuB,EAAoB5R,QAAQ0B,QAAQkQ,GACpChT,EAAMsK,SAAe0I,EAAQ,GAAGjQ,cAAc,2BAK1D/C,EAAMsK,SAAWqI,EAAS,GAAG5P,cAAc,oBAG/CjD,EAAiBoT,YAAYlT,EAAOA,EAAMmT,eAyD9C,IAAIC,EACAjB,EAAW3P,OAAS,GACpB4Q,EAAeZ,EAAepR,QAAQ0B,QAAQqP,EAAW5E,QAASvN,GAC9DoB,QAAQqN,SAAS2E,GACjBA,EAAaN,KAAK,WACdhQ,EAAQqG,OAAO9J,EAAS8S,EAAT9S,CAAqBW,MAGxC8C,EAAQqG,OAAO9J,EAAS8S,EAAT9S,CAAqBW,KAGxCZ,EAAM6N,IACFsC,EAAM8D,aAAe3T,EAAiB4T,WACrCT,MAAOpT,IACVqT,KAAK,SAAUC,GACT,IAAItB,EAAWsB,EAAStB,MAAQ,GAChCA,EAAerQ,QAAQ0B,QAAQ2O,EAAKlE,QACpC6F,EAAeZ,EAAef,EAAMzR,GAChCoB,QAAQqN,SAAS2E,GACjBA,EAAaN,KAAK,WACdhQ,EAAQqG,OAAO9J,EAASoS,EAATpS,CAAeW,MAGlC8C,EAAQqG,OAAO9J,EAASoS,EAATpS,CAAeW,WA0R9D,SAASuT,EAAsBhU,EAASC,EAAWL,EAAUqU,EAAInU,GAE7D,IAOIoU,EACAC,EARAC,EAAgB,KAChBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAgB,EAEhBC,KAIAC,GACIC,YAkFR,SAAqBnR,GACjB6Q,EAAW7Q,GAlFPoR,YAyFR,WACI,OAAOP,GAzFH5N,IA2GR,SAAa/F,EAAO8C,GAChBqR,IACAJ,EAAM9N,MACFnD,QAASA,EACT9C,MAASA,KA9GTkT,YAkHR,SAAqBlT,EAAOyS,GACTA,GAlHX2B,SAyHR,WACI,OAAOL,GAzHHI,cAAeA,GAEnBE,EAAgBjT,QAAQ0B,QAAQvD,GAIpC,OAFA8U,EAAQC,GAAG,qBAAsBH,GAE1BH,EAEP,SAASO,MAGDC,MAAQH,EAAQI,KAAK,gBAAkBlK,SAASmK,gBAAgBC,YAChE/J,OAAQyJ,EAAQI,KAAK,iBAAmBlK,SAASmK,gBAAgBE,aACjElL,IAAQlK,EAAU,GAAGqV,KAAKC,WAAatV,EAAU,GAAGkV,gBAAgBI,UACpEtL,KAAQhK,EAAU,GAAGqV,KAAKE,YAAcvV,EAAU,GAAGkV,gBAAgBK,aAGrEnB,GAAcC,EACdC,GAAc,GAGlBF,GAAa,EAKjB,SAASoB,IACL,GAAInB,EACA,OAGJ,IAAIoB,EAASA,EAAS,EAAIA,EAASlB,EAAMvR,OAErCyS,EAAS,GACFlB,EAAM,GAEbF,GAAa,EACbH,EAAavU,EAAS,WAIlB4U,EAAMtO,OAAO,EAAG,GAChBoO,GAAW,EACXoB,IACA9V,EAAS+V,OAAOxB,GAChBsB,KACD,KAGHpB,GAAa,EACTE,IACAA,GAAc,EACdS,MA7BRS,IAqEJ,SAASb,IACLhV,EAAS+V,OAAOzB,GAChBA,EAAgBtU,EAAS,WACrBoV,KACD,IA7vDPnT,QAAQ2C,kBA8yGR,SAA2BwE,GACvB,OAAOnH,QAAQsO,YAAYnH,IAAgB,OAARA,GA7yGvCnH,QAAQ6B,UAgzGR,SAAmBsF,GACf,QAASnH,QAAQsO,YAAYnH,IAAgB,OAARA,IA/yGzCnH,QAAQ+T,OAAO,eAAgB,kCAC1BC,SAAS,iBACNnU,KAAQ,WACRyJ,MAAQ,iBACR9B,OAAQ,kBACR7G,KAAQ,gBACRsT,MAAQ,iBACRC,OAAQ,kBACR3K,MAAQ,uBACRrD,KAAQ,gBACRuC,OAAQ,kBACRtI,MACIC,EAAM,4BACNE,EAAM,2BACNE,KAAM,8BAEXR,QAAQ+T,OAAO,eACrBI,UAAU,WACP,WACA,SAAUlW,GACN,OACIU,SAAU,IACVyV,KAAU,SAAUxV,EAAO8C,EAASyM,GAChCvP,EAAMoP,OACFG,EAAM0C,QAAS,SAAUwD,GACjBA,IACIrU,QAAQe,WAAWW,EAAQ4H,OAC3B5H,EAAQ4H,QAER5H,EAAQuP,KAAK,IAGjBvP,EAAQqG,OAAO9J,EAASoW,EAATpW,CAAkBW,YAQ5DuV,UAAU,kBACP,WACA,SAAUlW,GACN,OACIU,SAAU,IACVyV,KAAU,SAAUxV,EAAO8C,EAASyM,GAChCvP,EAAMoP,OACFG,EAAMmG,eAAgB,SAAUD,GACxBA,GACA3S,EAAQ6S,YAAYtW,EAASoW,EAATpW,CAAkBW,WAStEoB,QAAQ+T,OAAO,eACVI,UAAU,oBAAqB,WAC5B,OACIxV,SAAU,IACVC,OAAU,EACVwV,KAAU,SAAUxV,EAAO8C,GACvB9C,EAAMa,MAAQ,oBACVb,EAAMgB,OAAOsU,QACbxS,EAAQ6F,SAAS3I,EAAMgB,OAAOsU,YAMlDlU,QAAQ+T,OAAO,eACVI,UAAU,eACP,mBACA,SAAUzV,GACN,OACIC,SAAU,IACVE,SAAU,EACVuV,KAGJ,SAAgBxV,EAAO8C,EAASyM,GAE5BvP,EAAM4V,YAAc,GAEhB5V,EAAMgB,OAAOe,OACbe,EAAQ6F,SAAS3I,EAAMgB,OAAOe,MAC9B/B,EAAM4V,YAAc5V,EAAMgB,OAAOe,MAErC,IAGI8T,EAHAC,EAA0C,kBAAtB9V,EAAM2E,aAA0D,kBAAtB3E,EAAMkE,YACpE6R,EAAaxG,EAAMyG,YACnBC,GAAa,EAEjBnW,EAAiBiG,IAAI/F,EAAO8C,GAExBgT,IACA9V,EAAMa,MAAQ,cAEdb,EAAMkW,QAAU,WACZ,OAAOlW,EAAM+V,KAIrB/V,EAAMI,SAAsB0C,EAC5B9C,EAAM+V,GAASlQ,YAAa,EAE5B7F,EAAM6C,iBAAmB,WACrB,OAAOzB,QAAQ0B,QAAQA,EAAQ,GAAGC,cAAc,sBAGpD/C,EAAMoG,SAASpG,EAAOA,EAAM+V,IAE5B/V,EAAMmW,aAAe,WACjB,OAAOnW,GAGX,IACIoW,EACAvK,EAFAwK,KAEGC,EAAQlI,OAAOC,KAAKrO,EAAM+V,IAC7BQ,EAAWD,EAAK9T,OAChBgU,EAAWxW,EAAM+V,GAAS/R,YAC1ByS,GACI,cACA,eACA,YACA,YACA,iBAEA,aACA,kBACA,WACA,WACA,kBAEJC,GACI,gBAEJC,EAAWD,EAASlU,OAGxB,IAAKqJ,EAAI,EAAGA,EAAI0K,EAAOI,EAAS9K,IACxBA,EAAI0K,GAC+B,IAA/BE,EAASrG,QAAQkG,EAAKzK,KACtBwK,EAASpQ,KAAK8P,EAAU,IAAMO,EAAKzK,KAGG,IAAtCyK,EAAKlG,QAAQsG,EAAS7K,EAAI0K,KAC1BF,EAASpQ,KAAK8P,EAAU,IAAMW,EAAS7K,EAAI0K,IAKvDH,EAAU,IAAMC,EAASO,KAAK,KAAO,IAErC5W,EAAMoP,OAAOgH,EAMb,SAAqBS,EAAQC,EAAQ9W,GAEjC,IACI+Q,EADAgG,EAAS/W,EAAM+V,GAGnB,GAAIE,EACAlF,EAAwBgG,EAAO1F,SAC/B0F,EAAOzF,eAAiBtR,EAAMgB,OAAOO,KAAKwP,OACvC,CAEH,IAII3O,EAJA4U,EAAaD,EAAO9M,gBACpBY,EAAa7K,EAAMmB,WAAW6V,IAAe,KAC7CC,EAAaF,EAAOxU,aACpBF,EAAa4U,EAAQzU,OAqCzB,GAlCKuU,EAAOlR,aACRkR,EAAOlR,YAAa,GAGpBkR,EAAO/S,cAAgBwS,IAEvBxW,EAAMkG,YAAYlG,EAAO+W,GAGzB/W,EAAMoG,SAASpG,EAAO+W,GACtBP,EAAUO,EAAO/S,cAGjB6G,GAAgBA,EAAWpH,cAAiBoH,EAAW/E,aAIvDhD,EAAQsG,YAAYpJ,EAAMgB,OAAO4H,QACjCmO,EAAOjR,aAAc,IAJrBhD,EAAQ6F,SAAS3I,EAAMgB,OAAO4H,QAC9BmO,EAAOjR,aAAc,GAOrBiL,EADS,IAAT1O,GACS,EAEL0U,EAAOtT,aACC,EAEA,EAIhBsT,EAAO1F,SAAiBN,EACxBgG,EAAOzF,eAAiBtR,EAAMgB,OAAOO,KAAKwP,GAEtC/Q,EAAMsK,QACN,IAAKlI,EAAK,EAAGA,EAAKC,EAAMD,IACpBpC,EAAM8B,oBAAoBmV,EAAQ7U,GAAKpC,EAAMuL,YAAawL,GAAQ,QAGjElB,IACDA,EAAa7V,EAAM6C,oBAGnBkU,EAAOtT,aACPoS,EAAWzM,YAAYpJ,EAAMgB,OAAO4H,QAEpCiN,EAAWlN,SAAS3I,EAAMgB,OAAO4H,QAM7CqN,GAAQ,IA1EuB,GAEnCjW,EAAMkX,IAAI,WAAY,WAClBlX,EAAMkG,YAAYlG,EAAOA,EAAM+V,WA8EnD3U,QAAQ+T,OAAO,eACVI,UAAU,eAAgB,WACvB,OACIxV,SAAU,IACVE,SAAU,EACVuV,KAAU,SAAUxV,EAAO8C,GACvB9C,EAAMa,MAAQ,eAEVb,EAAMgB,OAAOqU,OACbvS,EAAQ6F,SAAS3I,EAAMgB,OAAOqU,OAC9BrV,EAAMmX,aAAenX,EAAMgB,OAAOqU,OAElCrV,EAAMmX,aAAe,OAMzC/V,QAAQ+T,OAAO,eACVI,UACG,UAAWrW,GAEnBA,EAAckY,SACV,WAAY,QAAS,WAAY,SAAU,UAAW,YAAa,iBACnE,mBAAoB,gBAAiB,iBAAkB,iBAAkB,oBAqnC7EhW,QAAQ+T,OAAO,eACVkC,QAAQ,kBAAmB,WAsExB,OApEIC,UAAW,SAAU7F,EAAM9C,EAAY4I,EAAWC,GAG9C,GAFAA,EAA+B,mBAAbA,EAA0BA,EAAW,cAElD/F,GAAwB,IAAhBA,EAAKjP,SAAiBmM,IAAe4I,EAC9C,SAWJ,IATA,IAKIE,EAAUxV,EALVhB,KACAyW,KACAC,EAAWlG,EAAK,GAChBmG,EAAWD,EAAKhJ,GAChBkJ,KAEA/L,EAAW2F,EAAKjP,OAChBqJ,EAAW,EAERA,EAAIC,GAEP0L,EADAG,EAAOlG,EAAK5F,MAGZgM,EADAD,EAAqBD,EAAKhJ,IACLgJ,EAGzB,IADA9L,EAAI,EACGA,EAAIC,GAEP0L,EADAG,EAAOlG,EAAK5F,MAGZgM,EADAD,EAAqBD,EAAKhJ,IACLgJ,GACrBF,EAAqBE,EAAKJ,KAEtBtV,EAAS4V,EAASJ,MAEVxV,EAAOM,aACPN,EAAOM,aAAa0D,KAAK0R,GAEzB1V,EAAOM,cAAgBoV,IAI/BD,EAAQzR,KAAK2R,GAIrB,IADA9L,EAAM4L,EAAQlV,OACTqJ,EAAI,EAAGA,EAAIC,EAAKD,IACjB5K,EAAKgF,KAAK4R,EAASH,EAAQ7L,KAE/B,OAAO5K,GAEX6W,UAAW,SAASC,EAAatG,EAAMuG,EAAYR,GAC/CA,EAAgC,mBAAbA,EAA0BA,EAAW,aAExD,IACIpV,EAEA6V,EAAOC,EAHPC,KAEA9V,EAAQoP,EAAOA,EAAKjP,OAAS,EAEjC,IAAKJ,EAAK,EAAGA,EAAKC,EAAMD,IAEpBoV,EADAS,EAAQ7W,QAAQC,KAAKoQ,EAAKrP,KAEtBhB,QAAQ0M,QAAQmK,EAAMD,KAAgBC,EAAMD,GAAYxV,OAAS,IACjE0V,EAASH,EAAaE,EAAMD,GAAaA,EAAYR,UAC9CS,EAAMD,GACbC,EAAM1V,aAAe2V,GAEzBC,EAAMlS,KAAKgS,GAEf,OAAOE,MAOvB/W,QAAQ+T,OAAO,eACVkC,QAAQ,kBACL,YAAa,UACb,SAAU7X,EAAWD,GA0HjB,OAxHI6Y,OAAiB,SAAUC,GACvB,YAAgD,IAAlCA,EAAUpP,KAAK,gBAEjCqP,SAAiB,SAAUhP,GACvB,IAAIiP,EAAMjP,EAMV,YALwBkP,IAApBlP,EAAEmP,cACFF,EAAMjP,EAAEmP,cAAcd,KAAK,QACAa,IAApBlP,EAAEoP,oBAAiEF,IAAlClP,EAAEoP,cAAcD,gBACxDF,EAAMjP,EAAEoP,cAAcD,cAAcd,KAAK,IAEtCY,GAEXlQ,SAAiB,SAAUrI,GACvB,IAAIyH,EAAUzH,EAAMkW,UAChBiC,EAAUnY,EAAMiL,eAChBpD,EAAU7H,EAAMkK,QAAQzC,EAAMwC,iBAElC,OACIlI,KAAS0F,EACTxF,OAAS4F,EACTD,MACI3F,OAAQ4F,EACR7B,IAAQyB,EAAM/B,WAElB1F,MAASA,EACTuH,OAAS4Q,EACT7Q,KAAS6Q,EACTQ,KAAS3Y,EAAM+J,eAAetC,GAC9BJ,SAAS,IAGjBuD,OAAiB,SAAU9H,GACvB,OAAOA,EAAQ2R,KAAK,iBAExBD,MAAiB,SAAU1R,GACvB,OAAOA,EAAQ2R,KAAK,gBAExBmE,OAAiB,SAAU9V,GACvB,IAAI+V,EAAqB/V,EAAQ,GAAGgW,wBACpC,OACItE,MAAQ1R,EAAQ2R,KAAK,eACrB7J,OAAQ9H,EAAQ2R,KAAK,gBACrB/K,IAAQmP,EAAmBnP,KAAOnK,EAAQwZ,aAAevZ,EAAU,GAAGqV,KAAKC,WAAatV,EAAU,GAAGkV,gBAAgBI,WACrHtL,KAAQqP,EAAmBrP,MAAQjK,EAAQyZ,aAAexZ,EAAU,GAAGqV,KAAKE,YAAcvV,EAAU,GAAGkV,gBAAgBK,cAG/HkE,gBAAiB,SAAU3P,EAAG/B,GAC1B,OACI2R,QAAU5P,EAAEG,MAAQrE,KAAKwT,OAAOrR,GAAQiC,KACxC2P,QAAU7P,EAAEK,MAAQvE,KAAKwT,OAAOrR,GAAQmC,IACxC0P,OAAU9P,EAAEG,MACZ4P,MAAU/P,EAAEG,MACZ6P,OAAUhQ,EAAEK,MACZ4P,MAAUjQ,EAAEK,MACZ6P,KAAU,EACVC,KAAU,EACVC,MAAU,EACVC,MAAU,EACVC,MAAU,EACVC,KAAU,EACVC,KAAU,EACVC,SAAU,EACVC,SAAU,EACVC,QAAU,EACVC,QAAU,IAGlBC,cAAiB,SAAU7Q,EAAGtD,EAAKoU,GAE/BpU,EAAIqT,MAAQrT,EAAIwT,KAChBxT,EAAIuT,MAAQvT,EAAIyT,KAGhBzT,EAAIwT,KAAOlQ,EAAEG,MACbzD,EAAIyT,KAAOnQ,EAAEK,MAGb3D,EAAI0T,MAAQ1T,EAAIwT,KAAOxT,EAAIqT,MAC3BrT,EAAI2T,MAAQ3T,EAAIyT,KAAOzT,EAAIuT,MAG3BvT,EAAI+T,SAAW/T,EAAI6T,KACnB7T,EAAIgU,SAAWhU,EAAI8T,KAGnB9T,EAAI6T,KAAqB,IAAd7T,EAAI0T,MAAc,EAAI1T,EAAI0T,MAAQ,EAAI,GAAK,EACtD1T,EAAI8T,KAAqB,IAAd9T,EAAI2T,MAAc,EAAI3T,EAAI2T,MAAQ,EAAI,GAAK,EAGtD,IAAIU,EAAQrV,KAAKsV,IAAItU,EAAI0T,OAAS1U,KAAKsV,IAAItU,EAAI2T,OAAS,EAAI,EAG5D,GAAIS,EAGA,OAFApU,EAAI4T,MAASS,OACbrU,EAAIuU,QAAS,GAKbvU,EAAI4T,QAAUS,GACdrU,EAAIiU,QAAU,EACdjU,EAAIkU,QAAU,IAEdlU,EAAIiU,SAAWjV,KAAKsV,IAAItU,EAAI0T,OACX,IAAb1T,EAAI6T,MAAc7T,EAAI6T,OAAS7T,EAAI+T,WACnC/T,EAAIiU,QAAU,GAElBjU,EAAIkU,SAAWlV,KAAKsV,IAAItU,EAAI2T,OACX,IAAb3T,EAAI8T,MAAc9T,EAAI8T,OAAS9T,EAAIgU,WACnChU,EAAIkU,QAAU,IAGtBlU,EAAI4T,MAAQS,GAEhBG,cAAiB,SAAUxa,EAAO8C,EAAStC,EAAQyI,GAC/CA,EAAOA,GAAQ,OACf7H,QAAQ0B,QAAQA,EAAQ2X,WAAW,IAAIlR,IAAIN,EAAMjJ,EAAMuD,WAAWY,WAAW3D,SAQjGY,QAAQ+T,OAAO,eACVkC,QAAQ,kBACL,YACA,SAAUqD,GAON,OANa,SAAUC,GACnB,OAAIvZ,QAAQ6B,UAAUyX,IAAcA,EAAUE,IAAID,GACvCD,EAAUzN,IAAI0N,GAElB,SAMvBvZ,QAAQ+T,OAAO,eACVkC,QAAQ,oBACL,iBACA,SAAU5X,GACN,IAII+F,EADAqV,KAsCJ,OAnCQzN,QAAS,SAAU0N,EAAM9a,GAChB6a,EAAO7a,EAAM+a,OACdF,EAAO7a,EAAM+a,SAEjBF,EAAO7a,EAAM+a,KAAKC,SAAWF,GAEjC5N,QAAS,SAAU4N,EAAM9a,GAChB6a,EAAO7a,EAAM+a,OACdF,EAAO7a,EAAM+a,SAEjBF,EAAO7a,EAAM+a,KAAKE,SAAWH,GAEjCxH,QAAS,WACL,MAnBO,iCAqBXtK,QAAS,SAAUhJ,GACf,OAAI6a,EAAO7a,EAAM+a,MAAQF,EAAO7a,EAAM+a,KAAKE,WACvCzV,EAAO/F,EAAewN,IAAI4N,EAAO7a,EAAM+a,KAAKE,WAEjCzV,EAGR/F,EAAewN,IA3Bf,4CA6BXlE,QAAS,SAAU/I,GACf,OAAI6a,EAAO7a,EAAM+a,MAAQF,EAAO7a,EAAM+a,KAAKC,WACvCxV,EAAO/F,EAAewN,IAAI4N,EAAO7a,EAAM+a,KAAKC,WAEjCxV,EAGR/F,EAAewN,IAnCf,gDA2C/B7L,QAAQ+T,OAAO,eACVkC,QAAQ,mBAAoB9D,GAEjCA,EAAsB6D,SAAW,UAAW,YAAa,WAAY,KAAM,YAgJ3EhW,QAAQ+T,OAAO,eACVkC,QAAQ,kBACL,UAAW,SAAU6D,GACjB,OA4PA,SAAsBha,EAAU8M,EAASmN,EAASC,GAC9C,IAAKha,QAAQ0M,QAAQ5M,IACM,IAApBA,EAASsB,OACZ,OAAOtB,EAGX,IAAIkB,EAAIC,EACJgZ,EAGJ,GADAA,EAvDJ,SAASC,EAAWtN,GAChB,IAAIE,EAAKI,EAAOH,EACZkN,EACAE,EAEJ,GAAIna,QAAQqN,SAAST,KAAa5M,QAAQ0M,QAAQE,GAAU,CAKxD,GAJAG,EAAUC,OAAOC,KAAKL,GACtBM,EAAUH,EAAO3L,OACjB6Y,KAEI/M,EAAQ,EACR,IAAKJ,EAAM,EAAGA,EAAMI,EAAOJ,IAEa,iBAAzBF,EAAQG,EAAOD,KAAsD,IAAhCF,EAAQG,EAAOD,IAAM1L,SAGjE+Y,EADOna,QAAQ0M,QAAQE,EAAQG,EAAOD,KAC7BF,EAAQG,EAAOD,IACjB9M,QAAQqN,SAAST,EAAQG,EAAOD,KAC9BoN,EAAWtN,EAAQG,EAAOD,MAG/BwC,MAAUvC,EAAOD,GACjBsJ,SAAUxJ,EAAQG,EAAOD,KAGjCmN,EAAQpV,KAAKsV,IAIrB,OADAA,EAAS,KACFF,EAGP,OAAOrN,EAuBDsN,CAAWtN,IACf5M,QAAQ0M,QAAQuN,KAAYja,QAAQqN,SAAS4M,IACzB,IAAnBA,EAAQ7Y,OAAc,CACzB,IAAKJ,EAAK,EAAGC,EAAOnB,EAASsB,OAAQJ,EAAKC,EAAMD,IAC5CN,EACIqZ,EACAja,EAASkB,GACTgZ,GAAY,eACZI,EAAgBC,GAGxB,OAAOva,EAKX,IAFAia,EAAQrJ,OAAeuJ,EACvBF,EAAQO,aAAe,EAClBtZ,EAAK,EAAGC,EAAOnB,EAASsB,OAAQJ,EAAKC,EAAMD,IAC5CN,EACIqZ,EACAja,EAASkB,GACTgZ,GAAY,eACZO,EAAWF,GAInB,OAAOva,GA5RX,SAASY,EAAoBqZ,EAASpZ,EAAM6Z,EAAYzL,EAAUD,EAAS2L,GACvE,IAAKza,QAAQe,WAAWgO,GACpB,OAAO,KAGX,IAAI/N,EAAIC,EAAMC,EACVwZ,EAAgB3L,EAASgL,EAASpZ,GAClCga,GAAgB,EAChBC,EAAgBb,EAAQO,aAE5B,GAAIta,QAAQ6B,UAAUlB,EAAK6Z,IAAc,CAKrC,IAHAvZ,GADAC,EAASP,EAAK6Z,IACEpZ,OAEhB2Y,EAAQO,aAAe,EAClBtZ,EAAK,EAAGA,EAAKC,EAAMD,IACpB2Z,EAAeja,EACXqZ,EACA7Y,EAAOF,GACPwZ,EACAzL,EACAD,EACA4L,GAAeD,IACdE,EAITZ,EAAQO,aAAeM,EAO3B,OAJI5a,QAAQe,WAAW+N,IACnBA,EAAQiL,EAASpZ,GAAsB,IAAhB+Z,GAAuC,IAAjBC,GAAwC,IAAjBF,GAGjEC,GAAeC,EAU1B,SAASE,EAASzE,EAAU/F,GACxB,GAAIrQ,QAAQ2C,kBAAkB0N,IAASrQ,QAAQ0M,QAAQ2D,GACnD,OAAO,KAGX,GAAIrQ,QAAQe,WAAWqV,GACnB,OAAOA,EAAS/F,EAAMyJ,GAEtB,GAAwB,kBAAb1D,EAEP,OADA/F,IAASA,KACO+F,EACb,IAAIpW,QAAQ6B,UAAUuU,GAazB,OAAO,KAZP,IAEI,OADa,IAAIhH,OAAOgH,GACVlK,KAAKmE,GAEvB,MAAOyK,GACH,MAAoB,iBAATzK,EACAA,EAAKrB,QAAQoH,IAAa,EAE1B,MAmB3B,SAAS2E,EAAYpa,EAAMqa,EAAW3M,GAClC,GAAIrO,QAAQ0M,QAAQsO,GAChB,OA4BR,SAAyBra,EAAMsa,EAAY5M,GACvC,IAAI5D,EAAGC,EAAMuQ,EAAW7Z,QAAU,EAAG4E,GAAS,EAC9C,GAAY,IAAR0E,EACA,OAAO,KAGX,IAAKD,EAAI,EAAGA,EAAIC,EAAKD,IACjB,GAAIsQ,EAAYpa,EAAMsa,EAAWxQ,IAAK4D,IAGlC,GAFArI,GAAS,GAEJqI,EACD,OAAO,OAKX,GAAIA,EACA,OAAO,EAKnB,OAAOrI,EAlDIkV,CAAgBva,EAAMqa,EAAW3M,GAExC,IAEI8M,EAAKC,EAAQC,EAFb3X,EAAYsX,EAAU1L,MACtBgM,EAAYN,EAAU5E,SAG1B,GAAa,OAAT1S,GAGA,IADA2X,GADAD,EAASpO,OAAOC,KAAKtM,IACLS,OACX+Z,EAAM,EAAGA,EAAME,EAAOF,IACvB,GAAIN,EAASS,EAAW3a,EAAKya,EAAOD,KAChC,OAAO,OAGZ,GAAInb,QAAQ6B,UAAUlB,EAAK+C,IAC9B,OAAOmX,EAASS,EAAW3a,EAAK+C,IAGxC,OAAO,KA4CX,SAAS2W,EAASN,EAASpZ,EAAM4a,EAAcC,EAAeC,GAC1D,OAAqB,IAAjBF,GACA5a,EAAK+a,cAAuB,EAC5B/a,EAAKgb,sBAAuB,OAC5Bhb,EAAKib,mBAAuB7B,EAAQO,kBAEX,IAAlBkB,IAAiD,IAAvBzB,EAAQzO,aACnB,IAAnBmQ,IAAiD,IAAtB1B,EAAQxO,WACtC5K,EAAK+a,cAAuB,EAC5B/a,EAAKgb,sBAAuB,OAC5Bhb,EAAKib,mBAAuB7B,EAAQO,yBAKjC3Z,EAAK+a,oBACL/a,EAAKgb,iCACLhb,EAAKib,oBAYhB,SAASrB,EAAUR,EAASpZ,GACxB,OAA8B,IAA1BoZ,EAAQrJ,OAAOtP,QAGR2Z,EAAYpa,EAAMoZ,EAAQrJ,OAAQqJ,EAAQvO,WAAY,GAarE,SAAS4O,EAAeL,EAASpZ,GAC7B,OAAO,MAgGvBX,QAAQ+T,OAAO,eACVkC,QAAQ,mBACL,UACA,SAAU6D,GACN,IAAI+B,EAAsB/B,EAAQ,WAC9BpZ,EAAsB,SAASA,EAAoBqZ,EAASpZ,EAAM4Y,EAAMuC,GACpE,IAAI9a,EAAIC,EAAMC,EAEd,GAAIlB,QAAQ6B,UAAUlB,EAAK4Y,IAAQ,CAI/B,IAFAtY,GADAC,EAASP,EAAK4Y,IACEnY,OAEXJ,EAAK,EAAGA,EAAKC,EAAMD,IACpBE,EAAOF,GAAMN,EAAoBqZ,EAAS7Y,EAAOF,GAAKuY,EAAMuC,GAGhEnb,EAAK4Y,GAAQuC,EAAUnb,EAAK4Y,GAAOQ,GAEvC,OAAOpZ,GAEXob,EAAsB,SAAkBC,EAAMrP,GAC1C,OAAOkP,EAAWG,EAAMrP,IAwBhC,OAtB0B,SAAiB7M,EAAU6M,GAC7C,IAAK3M,QAAQ0M,QAAQ5M,IACM,IAApBA,EAASsB,UACPpB,QAAQ0M,QAAQC,IAAY3M,QAAQqN,SAASV,IAAY3M,QAAQic,SAAStP,IAAY3M,QAAQe,WAAW4L,KACxF,IAAnBA,EAAQvL,SAAiBpB,QAAQe,WAAW4L,GAC/C,OAAO7M,EAGX,IAAIkB,EAAIC,EAER,IAAKD,EAAK,EAAGC,EAAOnB,EAASsB,OAAQJ,EAAKC,EAAMD,IAC5ClB,EAASkB,GAAMN,EACXiM,EACA7M,EAASkB,GACT,eACA+a,GAIR,OAAOA,EAASjc,EAAU6M,OAO9C3M,QAAQ+T,OAAO,eACVkC,QAAQ,gBACL,WAAY,iBACZ,SAAUlY,EAAUS,GAoNhB,SAAS0d,EAAYhU,EAAGiU,GACpB,IAAIC,EAAUD,EAAQpd,OACtB,GAAKod,EAAQE,aAYb,GAAIF,EAAQlT,QAAS,CACjBf,EAAEoU,iBACEH,EAAQhe,QAAQoe,aAChBJ,EAAQhe,QAAQoe,eAAeC,kBACxBL,EAAQhe,QAAQgL,SAASsT,WAChCN,EAAQhe,QAAQgL,SAASsT,UAAUnT,QAGvC,IAAI4N,EAAa1Y,EAAe0Y,SAAShP,GACrCwU,EAAaxF,EAAS7O,MAAQ8T,EAAQvX,IAAIkT,QAC1C6E,EAAazF,EAAS3O,MAAQ4T,EAAQvX,IAAImT,QAG1C2E,EAAa,IACbA,EAAa,GAIbC,EAAY,IACZA,EAAY,GAIZA,EAAY,GAAKR,EAAQS,kBACzBD,EAAYR,EAAQS,gBAAkB,IAItCF,EAAa,GAAKP,EAAQU,iBAC1BH,EAAaP,EAAQU,eAAiB,IAG1CV,EAAQlT,QAAQd,KAERC,KAAQsU,EAAaN,EAAQja,WAAWY,WACpCoZ,EAAQW,WAAa,GACrB,GACA,GACA,KACJxU,IAAQqU,EAAY,OAIxBP,EAAQ/U,eACR+U,EAAQnU,kBAAkBC,GAG9B,IAAI6U,EAAgBC,OAAOrF,aAAewE,EAAQhe,QAAQgL,SAASmK,gBAAgBI,UAC/EuJ,EAAgBF,GAAcC,OAAOE,aAAef,EAAQhe,QAAQgL,SAASqK,cAAgB2I,EAAQhe,QAAQgL,SAASqK,cAY1H,GAVIyJ,EAAgB/F,EAAS3O,OAAS0U,GAAiBd,EAAQS,iBAC3DI,OAAOG,SAAS,EAAG,IAGnBJ,EAAa7F,EAAS3O,OACtByU,OAAOG,SAAS,GAAI,IAGxB3e,EAAeua,cAAc7Q,EAAGiU,EAAQvX,IAAKuX,EAAQnD,aAEjDmD,EAAQnD,YAER,YADAmD,EAAQnD,aAAc,GAK1B,IAGI/B,EACAmG,EACAC,EACAC,EAGAC,EACAC,EACAC,EACAC,EACAjX,EAMAkX,EAnBAC,EAAa1G,EAAS7O,MAAQ8T,EAAQhe,QAAQgL,SAASsK,KAAKE,WAC5DkK,EAAa3G,EAAS3O,OAASyU,OAAOrF,aAAewE,EAAQhe,QAAQgL,SAASmK,gBAAgBI,WAM9FoK,GAAa,EACbC,GAAa,EAMbC,EAAa7B,EAAQlV,SACrBV,EAAayX,EAAMxX,KACnByX,EAAaD,EAAMrd,KACnBud,EAAaF,EAAMzG,KACnB4G,EAAaH,EAAM7X,OAEnBiY,EAvTZ,SAAwBlW,EAAGiU,GACvB,GAAIA,EAAQ/W,SAAU,CAClB,IAAIiZ,EAAU7f,EAAegZ,OAAO2E,EAAQ/W,UAC5C,GAAIiZ,EAAQ/V,KAAOJ,EAAEK,OAASL,EAAEK,OAAS8V,EAAQ/V,IAAM+V,EAAQ7U,QAC3D6U,EAAQjW,MAAQF,EAAEG,OAASH,EAAEG,OAASgW,EAAQjW,KAAOiW,EAAQjL,MAE7D,OAAO,EAGf,OAAO,EA8SckL,CAAepW,EAAGiU,GAEnC,IAAKiC,EAAU,CAaX,GARAnH,EAAYjX,QAAQ0B,QAChBya,EAAQhe,QAAQgL,SAASoV,iBACrBX,EACAC,MAIRT,EAAcnG,EAAUrY,WACHwe,EAAYjb,aAAeib,EAAYjb,WAAWkB,YAEnE,OAsBJ,GAnBAsa,EAAa,WAgBT,OAfAQ,EAAYf,EAAYvT,eACxB6T,EAAYM,EAAM7X,OAEd6X,EAAM7X,SAAWgY,IAEjBT,EAAQ/T,YACR+T,EAAQhV,WAAc,EACtByV,EAAUzV,WAAY,EAEtBsV,EAAM7X,OAAagY,EACnBhC,EAAQ/W,SAAW+Y,EAAUnV,UAAUoU,EAAYpe,SAAUmd,EAAQlT,SAErEyU,EAAY,KACZF,GAAY,IAET,GAGPxd,QAAQe,WAAWqc,EAAYrI,eAE/B,GADAqI,EAAcA,EAAYrI,gBACrB4I,IACD,WAED,CACH,GAA0B,iBAAtBP,EAAY3d,OAAkD,YAAtB2d,EAAY3d,MAapD,OAZA,IAAI2d,EAAYrd,WASZ,OARA,GAAsC,IAAlCqd,EAAYrd,WAAWqB,OAAc,CACrC,IAAKuc,IACD,OAGJJ,GAAU,IAgB9B,IALIpB,EAAQvX,IAAI4T,QAAUgF,GAAaY,KACnCL,GAAc,EACdX,EAAcY,EAAMpf,QAGnBwe,EAAYpe,WAAaoe,EAC1B,OAGJ,GAAIG,EACAhX,EAAM1F,OAAS,KACf0F,EAAM3B,IAAS,EAEfsZ,EAAQ,UAGR,GAAIH,EAAY,CAEZ,GADA9G,EAAYmG,EAAYpe,SACpBgB,QAAQ2C,kBAAkBsU,GAC1B,OAIJ,GAFAqG,EAAe9e,EAAegZ,OAAOP,GAEjCmG,EAAY/X,aAAe+X,EAAYlU,QACvCmU,EAAenG,EAAS7O,MAAQiV,EAAalV,KAAO5J,EAAe4U,MAAM6D,GAAa,OAEtF,GAAImG,EAAYlU,QACZmU,EAAenG,EAAS3O,MAAQ+U,EAAahV,IAAM9J,EAAegL,OAAOyN,GAAa,MACnF,CACH,IAAIuH,EAAUhgB,EAAegL,OAAOyN,GAMpC,GAJImG,EAAY3b,qBACZ+c,IAAYhgB,EAAegL,OAAO4T,EAAY3b,qBAG9CyV,EAAS3O,MAAQ+U,EAAahV,IAAMkW,EACpC,OAGJnB,EAAenG,EAAS3O,MAAQ+U,EAAahV,IAAMkW,EAAU,EAIrE,IAAKxe,QAAQe,WAAWqc,EAAYtI,SAChC,OAMJ,GAHA4I,EAAUN,EAAYtI,UACtBrO,EAAU2W,EAAYtU,QAAQ4U,EAAQ7U,iBAElCwU,EAAc,CACd,IAAIoB,EAAQrB,EAAYzU,eAAe+U,GAEvCnX,EAAM1F,OAAS4F,EACfF,EAAM3B,IAAS5E,QAAQ6B,UAAU4c,GAASA,EAAMna,UAAY,EAAI,EAEhE4Z,EAAQO,OAEJf,EAAQrb,cAAkD,IAAhCqb,EAAQvc,aAAaC,QAAgBsc,EAAQ3N,iBAAmBkO,EAAMpV,iBAMhGtC,EAAM1F,OAAS4F,EACfF,EAAM3B,IAAS8Y,EAAQpZ,UAAY,EAEnC4Z,EAAQR,IARRnX,EAAM1F,OAAS6c,EACfnX,EAAM3B,IAAS,EAEfsZ,EAAQ,UAQb,CAEH,KAAI/B,EAAQvX,IAAI4T,OAAS2D,EAAQvX,IAAIiU,SAAWsF,EAAUO,YAwDtD,OArDA,GAFAvC,EAAQvX,IAAIiU,QAAU,EAElBsD,EAAQvX,IAAI0T,MAAQ,EAAG,CAEvB,KADA7R,EAAUyX,GACI,CACV,KAAI3X,EAAM3B,IAAM,GAAK,GAGjB,OAFA6B,EAAUF,EAAM1F,OAAOM,aAAaoF,EAAM3B,IAAM,GAUxD,GAJIoZ,EAAM9X,OAAS8X,EAAM7X,QAAUM,IAAYwX,GAAS7B,EAAQ7W,cAC5DkB,EAAU0X,EAAUxV,eAAelC,KAGnCA,IAAWA,EAAQ/B,YAanB,OAZA,IAAIzD,EAAOwF,EAAQtF,aAAaC,OAEhCmF,EAAM1F,OAAS4F,EACfF,EAAM3B,IAAS3D,EAGXid,EADAjd,EAAO,EACCwF,EAAQtF,aAAaF,EAAO,GAE5B,SAMb,CAAA,KAAIkb,EAAQvX,IAAI0T,MAAQ,GAoB3B,OAlBA,KADAoF,EAAUnX,EAAM1F,WAEqB,IAAhC6c,EAAQvc,aAAaC,QAClBsc,EAAQvc,aAAaC,OAAS,EAAImF,EAAM3B,KACxCoZ,EAAM9X,OAAS8X,EAAM7X,QACrBuX,EAAQ3N,iBAAmBkO,EAAMpV,iBACjC6U,EAAQvc,aAAaC,OAAS,IAAM6c,EAAM3Z,WAAa8X,EAAQ7W,aAUnE,OARAkB,EAAU0X,EAAUrV,QAAQ4U,EAAQ7U,iBAEpCtC,EAAM1F,OAAS4F,EACfF,EAAM3B,IAAS8Y,EAAQpZ,UAAY,EAEnC4Z,EAAQR,GAexBM,EAAM9X,OAAS8X,EAAM7X,QACrBI,EAAM1F,QACNod,EAAMpV,kBAAoBtC,EAAM1F,OAAOkP,gBACvCkO,EAAM3Z,YAAciC,EAAM3B,MAE1BkZ,GAAY,GAGZK,EAAUhc,WAAWU,OAAOmb,EAAOzX,EAAOuX,KAC1CE,EAAMxX,KAAUD,EAChByX,EAAMzG,KAAU2G,EAChBF,EAAM/X,QAAU6X,EAChBE,EAAMpf,MAAUwe,EAEZA,EAAYlU,SACZ1K,EAAe4a,cACX+E,EACAhC,EAAQ/W,SACRpF,QAAQ2C,kBAAkB4D,EAAM1F,QAAU,EAAI0F,EAAM1F,OAAOmP,UAAY,GAGvEkO,GACAzX,GAAWF,EAAM1F,OAAS0F,EAAM1F,OAAOM,aAAe,OAAS6c,EAAM7X,OAAOrG,SAExEoe,EAAM5Z,UAAYmC,EAAQrF,OAAS,GAEnC8c,EAASzX,EAAQyX,EAAM5Z,UAAY,IACnCmZ,EAASO,EAAM7X,OAAOlB,SAASiZ,IACxBlf,SAAS,GAAGyK,WAAWC,aAC1ByS,EAAQ/W,SAAS,GACjBqY,EAAOze,SAAS,MAGpB0e,EAAUM,EAAM7X,OAAO9E,kBAAkB6c,IACzCT,EAAUO,EAAM7X,OAAOlB,SAASyY,IACzB1e,SAAS2f,MAAMxC,EAAQ/W,aAGlCqY,EAASO,EAAM7X,OAAOlB,SAASsB,EAAM1F,WAE7B0F,EAAM1F,OACN4c,EAAOze,SAAS2f,MAAMxC,EAAQ/W,UAG9BqY,EAAOhc,mBAAmBmd,QAAQzC,EAAQ/W,aAKtDqY,EAASO,EAAM7X,OAAOlB,SAASiZ,GAAS3X,EAAM1F,QAC1Cqd,EACAT,EAAOze,SAAS2f,MAAMxC,EAAQ/W,UAE9BqY,EAAOhc,mBAAmBmd,QAAQzC,EAAQ/W,WAIlD+Y,EAAUvU,YAEVwS,EAAQtS,WACJ,WACIsS,EAAQja,WAAW4E,SAASiX,YAlWnC7B,EAAQ0C,eACT1C,EAAQE,aAAc,EACtBD,EAAQtS,WACJ,WACIsS,EAAQja,WAAW0E,UAAUsV,EAAQlV,aAsWzD,SAAS6X,EAAW5W,EAAGiU,GAEnB,GADAjU,EAAEoU,iBACEH,EAAQlT,QAAS,CACjB,IAAI4D,GAAW,EACXuP,EAAWD,EAAQpd,OACnB0e,EAAWrB,EAAQnX,SAASkX,EAAQlV,SAAStG,MAC7CqQ,EAAWyM,EAAOze,SAEtBod,EAAQtS,WACJ,WACI+C,EAAUuP,EAAQja,WAAWqB,WAAW2Y,EAAQlV,YAKpDwW,EAAOvU,QACPkT,EAAQ1b,oBACJyb,EAAQlV,SAAStG,KAAM,SAAU0F,EAAOI,GAQpC,OAPAgX,EAAWrB,EAAQnX,SAASoB,GAC5B2K,EAAWyM,GAAUA,EAAOze,SACxBye,GAAUzM,KAAcvK,GAAWJ,EAAM3B,aAAe+B,EAAQpE,eAC5D+Z,EAAQxc,OAAO4H,QACfwJ,EAAShJ,YAAYoU,EAAQxc,OAAO4H,SAGf,IAAtBnB,EAAM3B,cAAgD,IAAvB2B,EAAMhE,cAC7C,MAAM,GAGT+Z,EAAQxc,OAAO4H,QACfwJ,EAAShJ,YAAYoU,EAAQxc,OAAO4H,QAI5C2U,EAAQlT,QAAQhF,SAChBkY,EAAQlT,QAAU,KAEdmT,EAAQ/U,eACR+U,EAAQ9U,aAGR8U,EAAQ2C,QACR3C,EAAQtS,WACJ,WACI,IAAIkV,EAAU5C,EAAQja,WAAWiE,QAC7B+V,EAAQlV,SACR4F,GAGJuP,EAAQja,WAAW2D,SAASqW,EAAQlV,SAAU+X,GAC9CC,OAIRC,EAAY/C,GACZC,EAAQtS,WACJ,WACIsS,EAAQja,WAAW2D,SAASqW,EAAQlV,UAAU,GAC9CgY,OAOhB,SAASA,IACL9C,EAAQlV,SAASd,OAAOwD,YACxBwS,EAAQlV,SAASd,OAAOuC,WAAY,EAEpCyT,EAAQlV,SAAW,KACnBmV,EAAQ2C,SAAW,EACnB3C,EAAQpV,YAAY,MAGxBhH,QAAQ0B,QAAQya,EAAQ/d,WAAW+gB,OAAO,WAAYhD,EAAQiD,cAC9Dpf,QAAQ0B,QAAQya,EAAQ/d,WAAW+gB,OAAO,cAAehD,EAAQiD,cACjEpf,QAAQ0B,QAAQya,EAAQ/d,WAAW+gB,OAAO,YAAahD,EAAQkD,eAC/Drf,QAAQ0B,QAAQya,EAAQ/d,WAAW+gB,OAAO,UAAWhD,EAAQiD,cAC7Dpf,QAAQ0B,QAAQya,EAAQ/d,WAAW+gB,OAAO,YAAahD,EAAQkD,eAC/Drf,QAAQ0B,QAAQya,EAAQhe,QAAQgL,SAASsK,MAAM0L,OAAO,aAAchD,EAAQmD,iBAGhF,SAASC,EAAkBrX,EAAGiU,GACtBA,EAAQpd,OAAOoD,WAAWmB,aAvoBlC,SAAsB4E,EAAGiU,GACrB,IAAKA,EAAQqD,UAA0B,IAAbtX,EAAEuX,QAA4B,IAAZvX,EAAEwX,UAK1CxX,EAAEyX,gBAAkBzX,EAAEoP,eAAiBpP,EAAEoP,cAAcqI,gBAA3D,CAKA,IAAIC,EAAa5f,QAAQ0B,QAAQwG,EAAE/B,QAC/B0Z,EAAaD,EAAShhB,QAC1B,GAAKihB,GAAeA,EAAWpgB,OAON,sBAArBogB,EAAWpgB,MAAf,CAIA,IACIqgB,EADAC,EAAkBH,EAASvM,KAAK,WAAW2M,cAE3C5D,EAAkBD,EAAQpd,OAC9B,GAAwB,UAApBghB,GACuB,aAApBA,GACoB,WAApBA,GACoB,WAApBA,EAHP,CAOA,KAAOH,GAAYA,EAAS,IAAMA,EAAS,KAAOzD,EAAQza,SAAS,CAC/D,GAAIlD,EAAewY,OAAO4I,GACtB,OAEJA,EAAWA,EAAS/e,SAaxB,GAVAqH,EAAEyX,gBAAiB,EACfzX,EAAEoP,gBACFpP,EAAEoP,cAAcqI,gBAAiB,GAErCzX,EAAEoU,iBAEFwD,EAAYD,EAAW9K,eAEvBoH,EAAQlV,SAAWzI,EAAeyI,SAAS6Y,GAEtC1D,EAAQja,WAAW0D,WAAWia,EAAW3D,EAAQlV,UAAtD,CAIAkV,EAAQnD,aAAc,EACtBoD,EAAQpV,YAAYmV,EAAQlV,UAE5B,IAAIiQ,EAAW1Y,EAAe0Y,SAAShP,GACvCiU,EAAQvX,IAAOpG,EAAeqZ,gBAAgBX,EAAU4I,EAAU9gB,UAE9D8gB,EAAU5W,QACViT,EAAQlT,QAAUjJ,QAAQ0B,QAAQya,EAAQhe,QAAQgL,SAASC,cAAc,UACpE7B,SAAS6U,EAAQxc,OAAOC,MACxB0H,SAAS6U,EAAQxc,OAAOsG,MACxBqB,SAAS6U,EAAQ7c,aAEtB4c,EAAQlT,QAAUjJ,QAAQ0B,QAAQya,EAAQhe,QAAQgL,SAASC,cAAc,OACpE7B,SAAS6U,EAAQxc,OAAOsG,MACxBqB,SAAS,kBACTA,SAAS6U,EAAQ7c,aAG1B4c,EAAQlT,QAAQd,KAERiL,MAAW5U,EAAe4U,MAAM0M,EAAU9gB,UAAY,KACtDwJ,UAAW,OAInB2T,EAAQW,WAAa,EACrB,IAGI3d,EAGA8gB,EACAC,EAPAC,EAAiB3hB,EAAe4U,MAAM0M,EAAU9gB,UAChDye,EAAiBqC,EACjB9O,EAAiByM,EAAOze,SAExBohB,IAAmBhE,EAAQ1W,gBAC3B2a,GAAiB,EAIjB5C,EAAOvU,SACPiT,EAAQW,WAAaX,EAAQlV,SAAStG,KAAKqP,UAAY,EACvDiQ,EAAqBjgB,QAAQ0B,QAAQyH,SAASC,cAAc,UAC5D8W,EAAqBlgB,QAAQ0B,QAAQyH,SAASmX,0BAE9ClE,EAAQ1b,oBACJyb,EAAQlV,SAAStG,KAAM,SAAU0F,EAAOI,GA6BpC,OA5BAgX,EAAWrB,EAAQnX,SAASoB,GAC5B2K,EAAWyM,GAAUA,EAAOze,SACxBye,GAAUzM,IACLqP,IACDlhB,EAAS6R,EAASjN,QAElBvF,EAAe4a,cACXgD,EACAjd,EACAkH,EAAM2J,UAAYmM,EAAQW,WAC1B,gBAGJoD,EAAMnY,OAAO5I,GAGTihB,IACAC,GAAU,GAIVjE,EAAQ7W,aAAe6W,EAAQxc,OAAO4H,UACpCf,GAAWJ,EAAM3B,aAAe+B,EAAQ/B,aAAe+B,EAAQpE,eACjE2O,EAASzJ,SAAS6U,EAAQxc,OAAO4H,UAKtC6Y,IAAiC,IAAtBha,EAAM3B,cAAgD,IAAvB2B,EAAMhE,cAExD,MAAO+d,GAEdH,EAAOlY,OAAOmY,GACd/D,EAAQlT,QAAQlB,OAAOkY,KAGvB9gB,EAAS6R,EAASjN,QACdqc,GACAjhB,EAAO,GAAGwC,cAAc,oBAAoBsC,SAIhDkY,EAAQlT,QAAQlB,OAAO5I,GACnBid,EAAQ7W,aAAe6W,EAAQxc,OAAO4H,QACtCwJ,EAASzJ,SAAS6U,EAAQxc,OAAO4H,SAIzC2U,EAAQlT,QAAQd,KAERC,KAAQ8O,EAAS7O,MAAQ8T,EAAQvX,IAAIkT,QAAUsE,EAAQja,WAAWY,WAC9DoZ,EAAQW,WAAa,GACrB,GACA,GACA,KACJxU,IAAQ4O,EAAS3O,MAAQ4T,EAAQvX,IAAImT,QAAU,OAIvDoE,EAAQ/d,UAAU0J,KAAK,QAAQC,OAAOoU,EAAQlT,SAC1CmT,EAAQja,WAAWkB,cACnB8Y,EAAQ/W,SAAWgX,EAAQpT,UAAU8W,EAAU9gB,SAAUmd,EAAQlT,SAE7D6W,EAAU5W,SACV1K,EAAe4a,cAAcgD,EAASD,EAAQ/W,SAAU+W,EAAQlV,SAAStG,KAAKqP,WAGlFmM,EAAQ/W,SAAS+C,IAAI,QAASgY,IAGlC/D,EAAQxS,YACRwS,EAAQ1T,WAAY,EAEhB0T,EAAQ/U,gBACR+U,EAAQ3U,gBACR2U,EAAQnU,kBAAkBC,IAG9BlI,QAAQ0B,QAAQya,EAAQ/d,WAAWmiB,KAAK,WAAYpE,EAAQiD,cAC5Dpf,QAAQ0B,QAAQya,EAAQ/d,WAAWmiB,KAAK,cAAepE,EAAQiD,cAC/Dpf,QAAQ0B,QAAQya,EAAQ/d,WAAWmiB,KAAK,YAAapE,EAAQkD,eAC7Drf,QAAQ0B,QAAQya,EAAQ/d,WAAWmiB,KAAK,UAAWpE,EAAQiD,cAC3Dpf,QAAQ0B,QAAQya,EAAQ/d,WAAWmiB,KAAK,YAAapE,EAAQkD,eAC7Drf,QAAQ0B,QAAQya,EAAQ/d,WAAWmiB,KAAK,aAAcpE,EAAQmD,iBAE9DnD,EAAQS,gBAAkBhZ,KAAK4c,IAC3BrE,EAAQ1I,KAAKgN,aACbtE,EAAQ1I,KAAKiN,aACbvE,EAAQlL,KAAKuC,aACb2I,EAAQlL,KAAKwP,aACbtE,EAAQlL,KAAKyP,cAGjBvE,EAAQU,eAAiBjZ,KAAK4c,IAC1BrE,EAAQ1I,KAAKkN,YACbxE,EAAQ1I,KAAKmN,YACbzE,EAAQlL,KAAKsC,YACb4I,EAAQlL,KAAK0P,YACbxE,EAAQlL,KAAK2P,iBAqcbC,CAAa3Y,EAAGiU,GAIxB,SAAS+C,EAAY/C,GACjBA,EAAQza,QAAQ6e,KACZ,uBAAwB,SAAUrY,GAC9BiU,EAAQ0C,cAAe,EACvB1C,EAAQE,aAAe,EACvBkD,EAAkBrX,EAAGiU,GACrBA,EAAQ2E,UAAY/iB,EAChB,WACIoe,EAAQ0C,cAAe,GACxB1C,EAAQpd,OAAOuG,aAK9B6W,EAAQza,QAAQ6e,KACZ,+BAAgC,WAC5BxiB,EAAS+V,OAAOqI,EAAQ2E,aA4JpC,OApEA,SAAgBliB,EAAO8C,EAASvD,EAASC,GACrC,IAAI+d,GACIqD,SAAiB,iBAAkBxC,OACnChE,YAAiB,KACjB/R,SAAiB,KACjBrC,IAAiB,KACjBQ,SAAiB,KACjB6D,QAAiB,KACjB4V,cAAiB,EACjBxC,aAAiB,EACjByE,UAAiB,KACjBrN,KAAiBtK,SAASsK,KAC1BxC,KAAiB9H,SAASmK,gBAC1BsJ,gBAAiB,KACjBC,eAAiB,KACjBC,WAAiB,KACjB/d,OAAiBH,EACjBT,QAAiBA,EACjBC,UAAiBA,EACjBsD,QAAiBA,EACjBqf,SAAiB,WACb7B,EAAY/C,IAEhB6E,QAAiB,SAAU9Y,GACvB4W,EAAW5W,EAAGiU,IAElBkD,cAAiB,SAAUnX,GACvBgU,EAAYhU,EAAGiU,IAEnBiD,aAAiB,SAAUlX,GACvBtJ,EAAMmgB,SAAU,EAChBD,EAAW5W,EAAGiU,IAElBmD,gBAAiB,SAAUpX,GACvB4W,EAAW5W,EAAGiU,KAGtB8E,EAAiB,SAAU/Y,GACvB,OAzHZ,SAA2BA,EAAGiU,GAC1B,IAAIC,EAAUD,EAAQpd,OACtB,GAAkB,KAAdmJ,EAAEgZ,QACE9E,EAAQ/U,eACR+U,EAAQ9U,aAGZ8U,EAAQ2C,SAAU,EAClBD,EAAW5W,EAAGiU,QAEd,GAAIC,EAAQ3W,eAAiByC,EAAEiZ,SAAU,CAMrC,GALA/E,EAAQlV,YAAW,GACfkV,EAAQ/U,eACR+U,EAAQ3U,iBAGP0U,EAAQlV,SACT,OAGJ,IAAIwW,EAAWrB,EAAQnX,SAASkX,EAAQlV,SAAStG,MAC7CqQ,EAAWyM,EAAOze,SAElBye,EAAOvU,QACPkT,EAAQ1b,oBACJyb,EAAQlV,SAAStG,KAAM,SAAU0F,EAAOI,GAQpC,OAPAgX,EAAWrB,EAAQnX,SAASoB,GAC5B2K,EAAWyM,GAAUA,EAAOze,SACxBye,GAAUzM,KAAcvK,GAAWJ,EAAM3B,aAAe+B,EAAQpE,eAC5D+Z,EAAQxc,OAAO4H,QACfwJ,EAASzJ,SAAS6U,EAAQxc,OAAO4H,SAGZ,IAAtBnB,EAAM3B,cAAgD,IAAvB2B,EAAMhE,cAE7C,MAAM,GAGT+Z,EAAQxc,OAAO4H,QACfwJ,EAASzJ,SAAS6U,EAAQxc,OAAO4H,SAkFlC4Z,CAAkBlZ,EAAGiU,IAEhCkF,EAAiB,SAAUnZ,GACvB,OA9EZ,SAAyBA,EAAGiU,GACxB,IAAIC,EAAUD,EAAQpd,OACtB,GAAIqd,EAAQ3W,gBAAkByC,EAAEiZ,SAAU,CAOtC,GANA/E,EAAQlV,YAAW,GAEfkV,EAAQ/U,eACR+U,EAAQ3U,iBAGP0U,EAAQlV,SACT,OAGJ,IAAIwW,EAAWrB,EAAQnX,SAASkX,EAAQlV,SAAStG,MAC7CqQ,EAAWyM,EAAOze,SAElBye,EAAOvU,QACPkT,EAAQ1b,oBACJyb,EAAQlV,SAAStG,KAAM,SAAU0F,EAAOI,GAQpC,OAPAgX,EAAWrB,EAAQnX,SAASoB,GAC5B2K,EAAWyM,GAAUA,EAAOze,SACxBye,GAAUzM,KAAcvK,GAAWJ,EAAM3B,aAAe+B,EAAQpE,eAC5D+Z,EAAQxc,OAAO4H,QACfwJ,EAAShJ,YAAYoU,EAAQxc,OAAO4H,SAGf,IAAtBnB,EAAM3B,cAAgD,IAAvB2B,EAAMhE,cAC7C,MAAM,GAGT+Z,EAAQxc,OAAO4H,QACfwJ,EAAShJ,YAAYoU,EAAQxc,OAAO4H,SA+CjC8Z,CAAgBpZ,EAAGiU,IAGlCvd,EAAMoiB,QAAU,SAAU9Y,GACtBiU,EAAQ6E,QAAQ9Y,IAGpBiU,EAAQ4E,WAER/gB,QAAQ0B,QAAQvD,EAAQgL,SAASsK,MAAM8M,KAAK,UAAWU,GACvDjhB,QAAQ0B,QAAQvD,EAAQgL,SAASsK,MAAM8M,KAAK,QAASc,GAErDziB,EAAMkX,IACF,WAAY,WACR9V,QAAQ0B,QAAQvD,EAAQgL,SAASsK,MAAM0L,OAAO,UAAW8B,GACzDjhB,QAAQ0B,QAAQvD,EAAQgL,SAASsK,MAAM0L,OAAO,QAASkC,GACnDziB,EAAM+G,WACN/G,EAAM+G,UAAU1B,SAGhBrF,EAAMwG,UACNxG,EAAMwG,SAASnB,eAU3CjE,QAAQ+T,OAAO,eACVkC,QAAQ,kBAAmB,WACxB,IAAIyH,EAASjX,EACTgE,EAAGC,EAEP,SAAS6W,EAAc5gB,GACnBA,EAAK0B,cAAe,EAGxB,SAASmf,EAAY7gB,GACjBA,EAAK0B,cAAe,EAgTxB,OA7SA,SAAgBzD,GACZ,IAAI2C,EAAG1B,GAEHa,oBAAsB9B,EAAM8B,oBAC5BsB,YAAsB,SAAUrB,GAC5B,OAAKA,GAWDA,IAASqD,KAAKxC,gBACVwC,KAAKxC,sBACEwC,KAAKxC,cAAcsC,aAE9BnD,EAAKmD,cAAgB,EACrBE,KAAKxC,cAAgBb,EACrBqD,KAAKyd,mBAAmB9gB,GACpBX,QAAQe,WAAWiD,KAAK0d,YACxB1d,KAAK0d,UAAU/gB,IAIhBA,IAtBCqD,KAAKxC,sBACEwC,KAAKxC,cAAcsC,aAE9BE,KAAKxC,cAAgB,KACjBxB,QAAQe,WAAWiD,KAAK0d,YACxB1d,KAAK0d,UAAU/gB,GAEZ,OAiBfghB,cAAsB,WAUlB,OATAjE,EAAU,KACN1Z,KAAKxC,uBACEwC,KAAKxC,cAAcsC,aAC1B4Z,EAAqB1Z,KAAKxC,cAC1BwC,KAAKxC,cAAgB,KACnCxB,QAAQe,WAAWiD,KAAK0d,YACN1d,KAAK0d,UAAU,OAGhBhE,GAEXkE,WAAsB,SAAUjhB,GAG5B,OAFAA,EAAOA,GAAQqD,KAAKxC,gBAEiB,OAAzBb,EAAKkI,gBACNjK,EAAMmB,WAAWY,EAAKkI,iBAE1B,MAEXgZ,kBAAsB,SAAUlhB,EAAMC,GAElC,QADA6F,EAAUzC,KAAK4d,WAAWjhB,MAElBC,EAAG6F,IAIAzC,KAAK6d,kBAAkBpb,EAAS7F,IAI/C6gB,mBAAsB,SAAU9gB,GAC5BA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,IACjBqD,KAAK6d,kBAAkBlhB,EAAM6gB,IAGrCM,qBAAsB,SAAUnhB,GAC5BA,EAAOA,GAAQqD,KAAKxC,cAChBxB,QAAQqN,SAAS1M,IACjBqD,KAAK6d,kBAAkBlhB,EAAM4gB,IAIrChd,YAAmC,WAC/B,OAAO3F,EAAM2F,eAEjBwd,SAAmC,SAAUlhB,EAAQmhB,EAAUjZ,GAgB3D,MAfqB,iBAAVA,EACHlI,GACAA,EAAOM,aAAa0D,KAAKmd,GACzBnhB,EAAOwB,cAAe,GAEtBzD,EAAMkB,SAAS+E,KAAKmd,GAGpBnhB,GACAA,EAAOM,aAAakD,OAAO0E,EAAO,EAAGiZ,GACrCnhB,EAAOwB,cAAe,GAEtBzD,EAAMkB,SAASuE,OAAO0E,EAAO,EAAGiZ,GAGjCA,GAEXC,cAAmC,SAAUD,GAEzC,OADAhe,KAAK+d,SAAS,KAAMC,GACbA,GAEXE,WAAmC,WAE/B,IADAxX,EAAM9L,EAAMkB,SAASsB,OAChBqJ,EAAI,EAAGA,EAAIC,EAAKD,IACjBzG,KAAKtD,oBAAoB9B,EAAMkB,SAAS2K,GAAI+W,IAGpDW,aAAmC,WAE/B,IADAzX,EAAM9L,EAAMkB,SAASsB,OAChBqJ,EAAI,EAAGA,EAAIC,EAAKD,IACjBzG,KAAKtD,oBAAoB9B,EAAMkB,SAAS2K,GAAI8W,IAGpDa,YAAmC,SAAUzhB,GACzCA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,MAEb8F,EADyB,OAAzB9F,EAAKkI,gBACK7E,KAAK4d,WAAWjhB,GAAMQ,aAEtBvC,EAAMkB,UAGZuE,OAAO1D,EAAK2D,UAAW,GAE/BN,KAAKO,cAEDP,KAAKxC,gBAAkBb,IACvBqD,KAAKxC,cAAgB,QAIjC6gB,YAAmC,SAAU1hB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,IAASA,EAAK0B,aAE/B,OADA1B,EAAK0B,cAAe,EACb1B,GAGf2hB,cAAmC,SAAU3hB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,GAEjB,OADAA,EAAK0B,cAAe,EACb1B,GAGf4hB,kBAAmC,WAC/B,OAAOve,KAAKxC,eAEhBghB,eAAmC,WAE/B,OADA9X,EAAM9L,EAAMkB,SAASsB,QACX,EACCxC,EAAMkB,SAAS,GAGnB,MAEX2iB,aAAmC,SAAU9hB,GAGzC,OAFAA,EAAOA,GAAQqD,KAAKxC,eAERL,cAEhBuhB,aAAmC,SAAU/hB,GAEzC,GADAA,EAAOA,GAAQqD,KAAKxC,cAChBxB,QAAQqN,SAAS1M,GAOjB,OANA8F,EAAUzC,KAAK4d,WAAWjhB,GAEtB+c,EADAjX,EACUA,EAAQtF,aAERvC,EAAMkB,UAK5B6iB,iBAAmC,SAAUhiB,GAEzC,GADAA,EAAOA,GAAQqD,KAAKxC,cAChBxB,QAAQqN,SAAS1M,KACjB+c,EAAU1Z,KAAK0e,aAAa/hB,GAC5BY,EAAUmc,EAAQtc,OACdT,EAAK2D,UAAY/C,GACjB,OAAOmc,EAAQ/c,EAAK2D,UAAY,IAI5Cse,iBAAmC,SAAUjiB,GAGzC,GAFAA,EAAUA,GAAQqD,KAAKxC,cACvBkc,EAAU1Z,KAAK0e,aAAa/hB,GACxBA,EAAK2D,UAAY,EACjB,OAAOoZ,EAAQ/c,EAAK2D,UAAY,IAGxCue,gBAAmC,SAAUliB,GAEzC,OADAA,EAAOA,GAAQqD,KAAKxC,cAChBxB,QAAQqN,SAAS1M,KACjB+c,EAAU/c,EAAKQ,eACAuc,EAAQtc,OAAS,EACrBT,EAAKQ,aAAa,GAG1B,MAEX2hB,kCAAmC,SAAUniB,GAGzC,OAFAA,EAAUA,GAAQqD,KAAKxC,eACvBkc,EAAU1Z,KAAK2e,iBAAiBhiB,IAErB+c,GAGXjX,EAAUzC,KAAK4d,WAAWjhB,IAEfqD,KAAK8e,kCAAkCrc,GAG3C,MAEXsc,cAAmC,SAAUpiB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,GAEjB,OADA+c,EAAU1Z,KAAK6e,gBAAgBliB,KAIpBqD,KAAK8e,kCAAkCniB,IAI1DqiB,cAAmC,SAAUriB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,GAEjB,OADA+c,EAAU1Z,KAAK4e,iBAAiBjiB,IAErBqD,KAAKif,oBAAoBvF,GAGpCjX,EAAUzC,KAAK4d,WAAWjhB,IAIlCsiB,oBAAmCrkB,EAAMyC,kBACzC6hB,mBAAmC,SAAUviB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,KACjB8F,EAAUzC,KAAK4d,WAAWjhB,IAEtB,OAAOqD,KAAKhC,YAAYyE,IAIpC0c,kBAAmC,WAC/B,IAAIC,EAAYpf,KAAKwe,iBACrB,OAAOxe,KAAKhC,YAAYohB,IAE5BC,oBAAmC,SAAU1iB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,KACjB+c,EAAU1Z,KAAK2e,iBAAiBhiB,IAE5B,OAAOqD,KAAKhC,YAAY0b,IAIpC4F,oBAAmC,SAAU3iB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,KACjB+c,EAAU1Z,KAAK4e,iBAAiBjiB,IAE5B,OAAOqD,KAAKhC,YAAY0b,IAIpC6F,iBAAmC,SAAU5iB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,KACjB+c,EAAU1Z,KAAK+e,cAAcpiB,IAEzB,OAAOqD,KAAKhC,YAAY0b,IAIpC8F,iBAAmC,SAAU7iB,GAGzC,GAFAA,EAAOA,GAAQqD,KAAKxC,cAEhBxB,QAAQqN,SAAS1M,KACjB+c,EAAU1Z,KAAKgf,cAAcriB,IAEzB,OAAOqD,KAAKhC,YAAY0b,KAMxC,OADA1d,QAAQE,OAAOtB,EAAMiB,KAAMA,GACpBjB,EAAMiB,QAMzBG,QAAQ+T,OAAO,oCAAqC0P,KAC/C,iBAAkB,SAAUplB,GACzBA,EAAeqlB,IACX,iCACC,iCACA,cACA,SACA,4FACA,6FACA,gBACA,qGACA,4CACA,aACA,YACA,eACA,0BACA,uFACA,uDACA,oCACA,0DACA,mCACA,6IACA,mDACA,sDACA,gCACA,oFACA,8CACA,qBACA,4EACA,gBACA,kGACA,0CACA,kCACA,gBACA,YACA,eACA,YAAYlO,KAAK,OAGtBnX,EAAeqlB,IACX,0CACA,iEAGJrlB,EAAeqlB,IACX,0CACA,wEA3yGZ","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.6\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = isUndefinedOrNull;\r\n\r\n    angular.isDefined = isDefined;\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\r\n        .constant('$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        });angular.module('ntt.TreeDnD')\r\n    .directive('compile', [\r\n        '$compile',\r\n        function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                if (angular.isFunction(element.empty)) {\r\n                                    element.empty();\r\n                                } else {\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n    )\r\n    .directive('compileReplace', [\r\n        '$compile',\r\n        function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                element.replaceWith($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n    );\n\nangular.module('ntt.TreeDnD')\r    .directive('treeDndNodeHandle', function () {\r        return {\r            restrict: 'A',\r            scope:    true,\r            link:     function (scope, element/*, attrs*/) {\r                scope.$type = 'TreeDnDNodeHandle';\r                if (scope.$class.handle) {\r                    element.addClass(scope.$class.handle);\r                }\r            }\r        };\r    });\n\nangular.module('ntt.TreeDnD')\r\n    .directive('treeDndNode', [\r\n        '$TreeDnDViewport',\r\n        function ($TreeDnDViewport) {\r\n            return {\r\n                restrict: 'A',\r\n                replace:  true,\r\n                link:     fnLink\r\n            };\r\n\r\n            function fnLink(scope, element, attrs) {\r\n\r\n                scope.$node_class = '';\r\n\r\n                if (scope.$class.node) {\r\n                    element.addClass(scope.$class.node);\r\n                    scope.$node_class = scope.$class.node;\r\n                }\r\n                var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\r\n                    keyNode    = attrs.treeDndNode,\r\n                    first      = true,\r\n                    childsElem;\r\n                $TreeDnDViewport.add(scope, element);\r\n\r\n                if (enabledDnD) {\r\n                    scope.$type = 'TreeDnDNode';\r\n\r\n                    scope.getData = function () {\r\n                        return scope[keyNode];\r\n                    };\r\n                }\r\n\r\n                scope.$element            = element;\r\n                scope[keyNode].__inited__ = true;\r\n\r\n                scope.getElementChilds = function () {\r\n                    return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                };\r\n\r\n                scope.setScope(scope, scope[keyNode]);\r\n\r\n                scope.getScopeNode = function () {\r\n                    return scope;\r\n                };\r\n\r\n                var objprops = [],\r\n                    objexpr,\r\n                    i, keyO  = Object.keys(scope[keyNode]),\r\n                    lenO     = keyO.length,\r\n                    hashKey  = scope[keyNode].__hashKey__,\r\n                    skipAttr = [\r\n                        '__visible__',\r\n                        '__children__',\r\n                        '__level__',\r\n                        '__index__',\r\n                        '__index_real__',\r\n\r\n                        '__parent__',\r\n                        '__parent_real__',\r\n                        '__dept__',\r\n                        '__icon__',\r\n                        '__icon_class__'\r\n                    ],\r\n                    keepAttr = [\r\n                        '__expanded__'\r\n                    ],\r\n                    lenKeep  = keepAttr.length;\r\n\r\n                // skip __visible__\r\n                for (i = 0; i < lenO + lenKeep; i++) {\r\n                    if (i < lenO) {\r\n                        if (skipAttr.indexOf(keyO[i]) === -1) {\r\n                            objprops.push(keyNode + '.' + keyO[i]);\r\n                        }\r\n                    } else {\r\n                        if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\r\n                            objprops.push(keyNode + '.' + keepAttr[i - lenO]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                objexpr = '[' + objprops.join(',') + ']';\r\n\r\n                scope.$watch(objexpr, fnWatchNode, true);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    scope.deleteScope(scope, scope[keyNode]);\r\n                });\r\n\r\n                function fnWatchNode(newVal, oldVal, scope) {\r\n\r\n                    var nodeOf = scope[keyNode],\r\n                        _icon;\r\n\r\n                    if (first) {\r\n                        _icon                 = nodeOf.__icon__;\r\n                        nodeOf.__icon_class__ = scope.$class.icon[_icon];\r\n                    } else {\r\n\r\n                        var parentReal = nodeOf.__parent_real__,\r\n                            parentNode = scope.tree_nodes[parentReal] || null,\r\n                            _childs    = nodeOf.__children__,\r\n                            _len       = _childs.length,\r\n                            _i;\r\n\r\n                        if (!nodeOf.__inited__) {\r\n                            nodeOf.__inited__ = true;\r\n                        }\r\n\r\n                        if (nodeOf.__hashKey__ !== hashKey) {\r\n                            // clear scope in $globals\r\n                            scope.deleteScope(scope, nodeOf);\r\n\r\n                            // add new scope into $globals\r\n                            scope.setScope(scope, nodeOf);\r\n                            hashKey = nodeOf.__hashKey__;\r\n                        }\r\n\r\n                        if (parentNode && (!parentNode.__expanded__ || !parentNode.__visible__)) {\r\n                            element.addClass(scope.$class.hidden);\r\n                            nodeOf.__visible__ = false;\r\n                        } else {\r\n                            element.removeClass(scope.$class.hidden);\r\n                            nodeOf.__visible__ = true;\r\n                        }\r\n\r\n                        if (_len === 0) {\r\n                            _icon = -1;\r\n                        } else {\r\n                            if (nodeOf.__expanded__) {\r\n                                _icon = 1;\r\n                            } else {\r\n                                _icon = 0;\r\n                            }\r\n                        }\r\n\r\n                        nodeOf.__icon__       = _icon;\r\n                        nodeOf.__icon_class__ = scope.$class.icon[_icon];\r\n\r\n                        if (scope.isTable) {\r\n                            for (_i = 0; _i < _len; _i++) {\r\n                                scope.for_all_descendants(_childs[_i], scope.hiddenChild, nodeOf, true);\r\n                            }\r\n                        } else {\r\n                            if (!childsElem) {\r\n                                childsElem = scope.getElementChilds();\r\n                            }\r\n\r\n                            if (nodeOf.__expanded__) {\r\n                                childsElem.removeClass(scope.$class.hidden);\r\n                            } else {\r\n                                childsElem.addClass(scope.$class.hidden);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    first = false;\r\n\r\n                }\r\n            }\r\n        }]\r\n    );\n\nangular.module('ntt.TreeDnD')\r\n    .directive('treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element/*, attrs*/) {\r\n                scope.$type = 'TreeDnDNodes';\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                } else {\r\n                    scope.$nodes_class = '';\r\n                }\r\n            }\r\n        };\r\n    });\n\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n        'treeDnd', fnInitTreeDnD);\r\n\r\nfnInitTreeDnD.$inject = [\r\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\r\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\r\n];\r\n\r\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\r\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport) {\r\n    return {\r\n        restrict:   'E',\r\n        scope:      true,\r\n        replace:    true,\r\n        controller: ['$scope', '$element', '$attrs', fnController],\r\n        compile:    fnCompile\r\n    };\r\n\r\n    function fnController($scope, $element, $attrs) {\r\n        $scope.indent      = 20;\r\n        $scope.indent_plus = 15;\r\n        $scope.indent_unit = 'px';\r\n        $scope.$tree_class = 'table';\r\n        $scope.primary_key = '__uid__';\r\n\r\n        $scope.$type          = 'TreeDnD';\r\n        // $scope.enabledFilter = null;\r\n        $scope.colDefinitions = [];\r\n        $scope.$globals       = {};\r\n        $scope.$class         = {};\r\n\r\n\t\t$scope.tree       = {};\r\n        $scope.treeData   = [];\r\n        $scope.tree_nodes = [];\r\n\r\n        $scope.$class = angular.copy($TreeDnDClass);\r\n        angular.extend(\r\n            $scope.$class.icon, {\r\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n            }\r\n        );\r\n\t\t\r\n\t\t//$scope.tree.on_select = $scope.$eval($attrs.onSelect);\t\t//not works\r\n\r\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\r\n            if (angular.isFunction(fn)) {\r\n                var _i, _len, _nodes;\r\n\r\n                if (fn(node, parent)) {\r\n                    // have error or need ignore children\r\n                    return false;\r\n                }\r\n                _nodes = node.__children__;\r\n                _len   = _nodes ? _nodes.length : 0;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\r\n                        // skip sibling of node checking\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            // succeed then continue\r\n            return true;\r\n        };\r\n\r\n        $scope.getLastDescendant = function (node) {\r\n            var last_child, n;\r\n            if (!node) {\r\n                node = $scope.tree ? $scope.tree.selected_node : false;\r\n            }\r\n            if (node === false) {\r\n                return false;\r\n            }\r\n            n = node.__children__.length;\r\n            if (n === 0) {\r\n                return node;\r\n            } else {\r\n                last_child = node.__children__[n - 1];\r\n                return $scope.getLastDescendant(last_child);\r\n            }\r\n        };\r\n\r\n        $scope.getElementChilds = function () {\r\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n        };\r\n\r\n        $scope.onClick = function (node) {\r\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                // We want to detach from Angular's digest cycle so we can\r\n                // independently measure the time for one cycle.\r\n                //setTimeout(\r\n                //    function () {\r\n                        $scope.tree.on_click(node);\r\n                //    }, 0\r\n                //);\r\n            }\r\n        };\r\n\r\n        $scope.onSelect = function (node) {\r\n            if (angular.isDefined($scope.tree)) {\r\n                if (node !== $scope.tree.selected_node) {\r\n                    $scope.tree.select_node(node);\r\n                }\r\n\r\n                //if (angular.isFunction($scope.tree.on_select)) {\r\n                //    setTimeout(\r\n                //        function () {\r\n                //            $scope.tree.on_select(node);\r\n                //        }, 0\r\n                //    );\r\n                //}\r\n            }\r\n        };\r\n\r\n        var passedExpand, _clone;\r\n        $scope.toggleExpand = function (node, fnCallback) {\r\n            passedExpand = true;\r\n            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                passedExpand = false;\r\n            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                passedExpand = false;\r\n            }\r\n\r\n            if (passedExpand) {\r\n                if (node.__children__.length > 0) {\r\n                    node.__expanded__ = !node.__expanded__;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        var _fnGetHash    = function (node) {\r\n                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n            },\r\n            _fnSetHash    = function (node) {\r\n                var _hashKey = _fnGetHash(node);\r\n                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                    node.__hashKey__ = _hashKey;\r\n                }\r\n                return node;\r\n            };\r\n        $scope.getHash    = _fnGetHash;\r\n        $scope.$callbacks = {\r\n            getHash:             _fnGetHash,\r\n            setHash:             _fnSetHash,\r\n            for_all_descendants: $scope.for_all_descendants,\r\n            /*expand:              function (node) {\r\n             return true;\r\n             },*/\r\n            accept:              function (/*dragInfo, moveTo, isChanged*/) {\r\n                return $scope.dropEnabled === true;\r\n            },\r\n            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                var unit = 0,\r\n                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                if (!skipUnit) {\r\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                }\r\n\r\n                if (level - 1 < 1) {\r\n                    return edge + unit;\r\n                } else {\r\n                    return $scope.indent * (level - 1) + edge + unit;\r\n                }\r\n            },\r\n            droppable:           function () {\r\n                return $scope.dropEnabled === true;\r\n            },\r\n            draggable:           function () {\r\n                return $scope.dragEnabled === true;\r\n            },\r\n            beforeDrop:          function (/*event*/) {\r\n                return true;\r\n            },\r\n            changeKey:           function (node) {\r\n                var _key     = node.__uid__;\r\n                node.__uid__ = Math.random();\r\n                if (node.__selected__) {\r\n                    delete node.__selected__;\r\n                }\r\n\r\n                if ($scope.primary_key !== '__uid__') {\r\n                    _key = '' + node[$scope.primary_key];\r\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                    node[$scope.primary_key] = _key;\r\n                }\r\n                // delete(node.__hashKey__);\r\n            },\r\n            clone:               function (node/*, _this*/) {\r\n                _clone = angular.copy(node);\r\n                this.for_all_descendants(_clone, this.changeKey);\r\n                return _clone;\r\n            },\r\n            remove:              function (node, parent, _this, delayReload) {\r\n                var temp = parent.splice(node.__index__, 1)[0];\r\n                if (!delayReload) {\r\n                    $scope.reload_data();\r\n                }\r\n                return temp;\r\n            },\r\n            clearInfo:           function (node) {\r\n                delete node.__inited__;\r\n                delete node.__visible__;\r\n\r\n                // always changed after call reload_data\r\n                //delete node.__hashKey__;\r\n            },\r\n            add:                 function (node, pos, parent/*, _this*/) {\r\n                // clearInfo\r\n                this.for_all_descendants(node, this.clearInfo);\r\n                if (parent) {\r\n                    if (parent.length > -1) {\r\n                        if (pos > -1) {\r\n                            parent.splice(pos, 0, node);\r\n                        } else {\r\n                            // todo If children need load crazy\r\n                            parent.push(node);\r\n                        }\r\n                    } else {\r\n                        parent.push(node);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.deleteScope = function (scope, node) {\r\n            var _hash = node.__hashKey__;\r\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\r\n                delete $scope.$globals[_hash];\r\n            }\r\n        };\r\n\r\n        $scope.setScope = function (scope, node) {\r\n            var _hash = node.__hashKey__;\r\n            if ($scope.$globals[_hash] !== scope) {\r\n                $scope.$globals[_hash] = scope;\r\n            }\r\n        };\r\n\r\n        $scope.getScope = function (node) {\r\n            if (node) {\r\n                var _hash = node.__hashKey__;\r\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\r\n                return $scope.$globals[_hash];\r\n            }\r\n            return $scope;\r\n        };\r\n\r\n        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n            $scope.placeElm    = null;\r\n            //                            $scope.dragBorder = 30;\r\n            $scope.dragEnabled = null;\r\n            $scope.dropEnabled = null;\r\n            $scope.horizontal  = null;\r\n\r\n            if ($attrs.enableDrag) {\r\n\r\n                $scope.dragDelay       = 0;\r\n                $scope.enabledMove     = true;\r\n                $scope.statusMove      = true;\r\n                $scope.enabledHotkey   = false;\r\n                $scope.enabledCollapse = null;\r\n                $scope.statusElm       = null;\r\n                $scope.dragging        = null;\r\n\r\n                angular.extend(\r\n                    $scope.$callbacks, {\r\n                        beforeDrag: function (/*scopeDrag*/) {\r\n                            return true;\r\n                        },\r\n                        dragStop:   function (info, passed) {\r\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\r\n                                return null;\r\n                            }\r\n\r\n                            info.target.reload_data();\r\n\r\n                            if (info.target !== info.drag && info.drag.enabledMove) {\r\n                                info.drag.reload_data();\r\n                            }\r\n                        },\r\n                        dropped:    function (info/*, pass*/) {\r\n                            if (!info) {\r\n                                return null;\r\n                            }\r\n\r\n                            var _node         = info.node,\r\n                                _nodeAdd      = null,\r\n                                _move         = info.move,\r\n                                _parent       = null,\r\n                                _parentRemove = info.parent || info.drag.treeData,\r\n                                _parentAdd    = _move.parent || info.target.treeData,\r\n                                isMove        = info.drag.enabledMove;\r\n\r\n                            if (!info.changed && isMove) {\r\n                                return false;\r\n                            }\r\n\r\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                if (isMove) {\r\n                                    _parent = _parentRemove;\r\n                                    if (angular.isDefined(_parent.__children__)) {\r\n                                        _parent = _parent.__children__;\r\n                                    }\r\n\r\n                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                        _node,\r\n                                        _parent,\r\n                                        info.drag.$callbacks,\r\n                                        true // delay reload\r\n                                    );\r\n                                } else {\r\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                }\r\n\r\n                                // if node dragging change index in sample node parent\r\n                                // and index node decrement\r\n                                if (isMove &&\r\n                                    info.drag === info.target &&\r\n                                    _parentRemove === _parentAdd &&\r\n                                    _move.pos >= info.node.__index__) {\r\n                                    _move.pos--;\r\n                                }\r\n\r\n                                _parent = _parentAdd;\r\n                                if (_parent.__children__) {\r\n                                    _parent = _parent.__children__;\r\n                                }\r\n\r\n                                info.target.$callbacks.add(\r\n                                    _nodeAdd,\r\n                                    _move.pos,\r\n                                    _parent,\r\n                                    info.drag.$callbacks\r\n                                );\r\n\r\n                                return true;\r\n                            }\r\n\r\n                            return false;\r\n                        },\r\n                        dragStart:  function (event) {\r\n                        },\r\n                        dragMove:   function (event) {\r\n                        }\r\n                    }\r\n                );\r\n\r\n                $scope.setDragging = function (dragInfo) {\r\n                    $scope.dragging = dragInfo;\r\n                };\r\n\r\n                $scope.enableMove = function (val) {\r\n                    if (typeof val === 'boolean') {\r\n                        $scope.enabledMove = val;\r\n                    } else {\r\n                        $scope.enabledMove = true;\r\n                    }\r\n                };\r\n\r\n                if ($attrs.enableStatus) {\r\n                    $scope.enabledStatus = false;\r\n\r\n                    $scope.hideStatus = function () {\r\n                        if ($scope.statusElm) {\r\n                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                        }\r\n                    };\r\n\r\n                    $scope.refreshStatus = function () {\r\n                        if (!$scope.dragging) {\r\n                            return;\r\n                        }\r\n\r\n                        if ($scope.enabledStatus) {\r\n                            var statusElmOld = $scope.statusElm;\r\n                            if ($scope.enabledMove) {\r\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                            } else {\r\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                            }\r\n\r\n                            if (statusElmOld !== $scope.statusElm) {\r\n                                if (statusElmOld) {\r\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                    statusElmOld.remove();\r\n                                }\r\n                                $document.find('body').append($scope.statusElm);\r\n\r\n                            }\r\n\r\n                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                        }\r\n                    };\r\n\r\n                    $scope.setPositionStatus = function (e) {\r\n                        if ($scope.statusElm) {\r\n                            $scope.statusElm.css(\r\n                                {\r\n                                    'left':    e.pageX + 10 + 'px',\r\n                                    'top':     e.pageY + 15 + 'px',\r\n                                    'z-index': 9999\r\n                                }\r\n                            );\r\n                            $scope.statusElm.addClass($scope.$class.status);\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n\r\n            $scope.targeting = false;\r\n\r\n            $scope.getPrevSibling = function (node) {\r\n                if (node && node.__index__ > 0) {\r\n                    var _parent, _index = node.__index__ - 1;\r\n\r\n                    if (angular.isDefined(node.__parent_real__)) {\r\n                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                        return _parent.__children__[_index];\r\n                    }\r\n                    return $scope.treeData[_index];\r\n\r\n                }\r\n                return null;\r\n            };\r\n\r\n            $scope.getNode = function (index) {\r\n                if (angular.isUndefinedOrNull(index)) {\r\n                    return null;\r\n                }\r\n                return $scope.tree_nodes[index];\r\n            };\r\n\r\n            $scope.initPlace = function (element, dragElm) {\r\n\r\n                if (!$scope.placeElm) {\r\n                    if ($scope.isTable) {\r\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                        var _len_down   = $scope.colDefinitions.length;\r\n                        $scope.placeElm.append(\r\n                            angular.element($window.document.createElement('td'))\r\n                                .addClass($scope.$class.empty)\r\n                                .addClass('indented')\r\n                                .addClass($scope.$class.place)\r\n                        );\r\n                        while (_len_down-- > 0) {\r\n                            $scope.placeElm.append(\r\n                                angular.element($window.document.createElement('td'))\r\n                                    .addClass($scope.$class.empty)\r\n                                    .addClass($scope.$class.place)\r\n                            );\r\n                        }\r\n                    } else {\r\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                            .addClass($scope.$class.empty)\r\n                            .addClass($scope.$class.place);\r\n                    }\r\n\r\n                }\r\n\r\n                if (dragElm) {\r\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                }\r\n\r\n                if (element) {\r\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                } else {\r\n                    $scope.getElementChilds().append($scope.placeElm);\r\n                }\r\n\r\n                return $scope.placeElm;\r\n            };\r\n\r\n            $scope.hidePlace = function () {\r\n                if ($scope.placeElm) {\r\n                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                }\r\n            };\r\n\r\n            $scope.showPlace = function () {\r\n                if ($scope.placeElm) {\r\n                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                }\r\n            };\r\n\r\n            $scope.getScopeTree = function () {\r\n                return $scope;\r\n            };\r\n\r\n        }\r\n\r\n        $scope.$safeApply = $safeApply;\r\n\r\n        $scope.hiddenChild = function fnHiddenChild(node, parent) {\r\n            var nodeScope = $scope.getScope(node);\r\n            if (nodeScope) {\r\n                if (parent && parent.__expanded__ && parent.__visible__) {\r\n                    nodeScope.$element.removeClass($scope.$class.hidden);\r\n                    node.__visible__ = true;\r\n                } else {\r\n                    nodeScope.$element.addClass($scope.$class.hidden);\r\n                    node.__visible__ = false;\r\n                }\r\n            } else {\r\n                // show node & init scope\r\n                if (parent && parent.__expanded__ && parent.__visible__) {\r\n                    node.__visible__ = true;\r\n                } else {\r\n                    node.__visible__ = false;\r\n                }\r\n            }\r\n\r\n            // skip all child hiding... if not expaned\r\n            return node.__expanded__ === false;\r\n        };\r\n\r\n        var _fnInitFilter,\r\n            _fnInitOrderBy,\r\n            _fnGetControl,\r\n            _defaultFilterOption = {\r\n                showParent: true,\r\n                showChild:  false,\r\n                beginAnd:   true\r\n            },\r\n            tree,\r\n            _watches             = [\r\n                [\r\n                    'enableDrag',\r\n                    [\r\n                        ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                        ['boolean', 'enableMove', null, 'enabledMove'],\r\n                        ['number', 'dragDelay', 0, null, 0],\r\n                        ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                        ['boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                            if (isHotkey) {\r\n                                $scope.enabledMove = false;\r\n                            } else {\r\n                                $scope.enabledMove = $scope.statusMove;\r\n                            }\r\n                        }]\r\n                    ]\r\n                ],\r\n                [\r\n                    ['enableDrag', 'enableStatus'], [\r\n                    ['string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null, function (_url) {\r\n                        if (_url && $templateCache.get(_url)) {\r\n                            $TreeDnDTemplate.setCopy(_url, $scope);\r\n                        }\r\n                    }],\r\n                    ['string', 'templateMove', $attrs.templateMove, 'templateMove', null, function (_url) {\r\n                        if (_url && $templateCache.get(_url)) {\r\n                            $TreeDnDTemplate.setMove(_url, $scope);\r\n                        }\r\n                    }]\r\n                ]],\r\n                [\r\n                    [['enableDrag', 'enableDrop']], [\r\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                ],\r\n                [\r\n                    '*', [\r\n                    ['boolean', 'treeTable', true, 'treeTable', null],\r\n                    ['boolean', 'horizontal'],\r\n                    ['callback', 'treeClass', function (val) {\r\n                        switch (typeof val) {\r\n                            case 'string':\r\n                                $scope.$tree_class = val;\r\n                                break;\r\n                            case 'object':\r\n                                angular.extend($scope.$class, val);\r\n                                $scope.$tree_class = $scope.$class.tree;\r\n                                break;\r\n                            default:\r\n                                $scope.$tree_class = $attrs.treeClass;\r\n                                break;\r\n                        }\r\n                    }, 'treeClass', function () {\r\n                        $scope.$tree_class = $scope.$class.tree + ' table';\r\n                    }, null, function () {\r\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\r\n                            $scope.$tree_class = $attrs.treeClass.trim();\r\n                            return true;\r\n                        }\r\n                    }],\r\n                    [\r\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                        function (expandOn) {\r\n                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                $scope.expandingProperty = $attrs.expandOn;\r\n                            }\r\n                        }],\r\n                    ['object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\r\n                     'tree', null, function ($tree) {\r\n\r\n                        if (!angular.isFunction(_fnGetControl)) {\r\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                        }\r\n\r\n                        if (angular.isFunction(_fnGetControl)) {\r\n                            tree = angular.extend(\r\n                                $tree,\r\n                                _fnGetControl($scope)\r\n                            );\r\n                        }\r\n                    }],\r\n                    [\r\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                        function (colDefs) {\r\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                $scope.colDefinitions = getColDefs();\r\n                            }\r\n                        }],\r\n                    [\r\n                        ['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy\r\n                    ],\r\n                    [\r\n                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                        var _passed = false;\r\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                            var _keysF = Object.keys(filters),\r\n                                _lenF  = _keysF.length, _iF;\r\n\r\n                            if (_lenF > 0) {\r\n                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\r\n                                        filters[_keysF[_iF]].length === 0) {\r\n                                        continue;\r\n                                    }\r\n                                    _passed = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        $scope.enabledFilter = _passed;\r\n                        reload_data();\r\n                    }],\r\n                    [\r\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                        _defaultFilterOption, function (option) {\r\n                        if (angular.isObject(option)) {\r\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                        }\r\n                    }],\r\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\r\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\r\n                    ['number', 'indent', 30, null, 30],\r\n                    ['number', 'indentPlus', 20, null, 20],\r\n                    ['null', 'callbacks', function (optCallbacks) {\r\n                        angular.forEach(\r\n                            optCallbacks, function (value, key) {\r\n                                if (typeof value === 'function') {\r\n                                    if ($scope.$callbacks[key]) {\r\n                                        $scope.$callbacks[key] = value;\r\n                                    }\r\n                                }\r\n                            }\r\n                        );\r\n                        return $scope.$callbacks;\r\n                    },\r\n                     '$callbacks'\r\n                    ],\r\n                    ['number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                        reload_data();\r\n                    }],\r\n                    ['number', 'treeLimit', 100, '$TreeLimit', 100],\r\n                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                ]]\r\n            ],\r\n            w, lenW              = _watches.length,\r\n            i, len,\r\n            _curW,\r\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\r\n\r\n            // debounce reload_Data;\r\n            timeReloadData, tmpTreeData;\r\n\r\n        for (w = 0; w < lenW; w++) {\r\n            // skip if not exist\r\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\r\n                continue;\r\n            }\r\n            _curW = _watches[w][1];\r\n            for (i = 0, len = _curW.length; i < len; i++) {\r\n                _typeW    = _curW[i][0];\r\n                _nameW    = _curW[i][1];\r\n                _defaultW = _curW[i][2];\r\n                _scopeW   = _curW[i][3];\r\n                _NotW     = _curW[i][4];\r\n                _AfterW   = _curW[i][5];\r\n                _BeforeW  = _curW[i][6];\r\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n            }\r\n        }\r\n\r\n        if ($attrs.treeData) {\r\n            $scope.$watch(\r\n                $attrs.treeData, function (val) {\r\n                    if (angular.equals(val, $scope.treeData)) {\r\n                        return;\r\n                    }\r\n\r\n                    tmpTreeData = val;\r\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\r\n                        timeReloadData = $timeout(timeLoadData, 350);\r\n                    }\r\n                }, true\r\n            );\r\n        }\r\n\r\n        function timeLoadData() {\r\n            $scope.treeData = tmpTreeData;\r\n            reload_data();\r\n            timeReloadData = null;\r\n        }\r\n\r\n        $scope.updateLimit = function updateLimit() {\r\n            //console.log('Call fn UpdateLimit');\r\n            $scope.$TreeLimit += 50;\r\n        };\r\n\r\n        $scope.reload_data = reload_data;\r\n\r\n        function check_exist_attr(attrs, existAttr, isAnd) {\r\n            if (angular.isUndefinedOrNull(existAttr)) {\r\n                return false;\r\n            }\r\n\r\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                return true;\r\n            }\r\n\r\n            if (angular.isArray(existAttr)) {\r\n                return for_each_attrs(attrs, existAttr, isAnd);\r\n            }\r\n        }\r\n\r\n        function for_each_attrs(attrs, exist, isAnd) {\r\n            var i, len = exist.length, passed = false;\r\n\r\n            if (len === 0) {\r\n                return null;\r\n            }\r\n            for (i = 0; i < len; i++) {\r\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                    passed = true;\r\n                    if (!isAnd) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (isAnd) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return passed;\r\n        }\r\n\r\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\r\n                               fnBefore) {\r\n            nameScope = nameScope || nameAttr;\r\n            if (typeof type === 'string' || angular.isArray(type)) {\r\n                if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                    return;//jmp\r\n                }\r\n                if (typeof $attrs[nameAttr] === 'string') {\r\n                    $scope.$watch(\r\n                        $attrs[nameAttr], function (val) {\r\n                            if (typeof type === 'string' && typeof val === type ||\r\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\r\n                            ) {\r\n                                $scope[nameScope] = val;\r\n                            } else {\r\n                                if (angular.isFunction(valDefault)) {\r\n                                    $scope[nameScope] = valDefault(val);\r\n                                } else {\r\n                                    $scope[nameScope] = valDefault;\r\n                                }\r\n                            }\r\n\r\n                            if (angular.isFunction(fnAfter)) {\r\n                                fnAfter($scope[nameScope], $scope);\r\n                            }\r\n                        }, true\r\n                    );\r\n                } else {\r\n\r\n                    if (angular.isFunction(fnNotExist)) {\r\n                        $scope[nameScope] = fnNotExist();\r\n                    } else if (!angular.isUndefined(fnNotExist)) {\r\n                        $scope[nameScope] = fnNotExist;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function $safeApply(fn) {\r\n            var phase = this.$root.$$phase;\r\n            if (phase === '$apply' || phase === '$digest') {\r\n                if (fn && typeof fn === 'function') {\r\n                    fn();\r\n                }\r\n            } else {\r\n                this.$apply(fn);\r\n            }\r\n        }\r\n\r\n        function getExpandOn() {\r\n            if ($scope.treeData && $scope.treeData.length) {\r\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                    _regex                                 = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\r\n                    _len,\r\n                    i;\r\n                // Auto get first field with type is string;\r\n                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\r\n                        $scope.expandingProperty = _keys[i];\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // Auto get first\r\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\r\n                    $scope.expandingProperty = _keys[0];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        function getColDefs() {\r\n            // Auto get Defs except attribute __level__ ....\r\n            if ($scope.treeData.length) {\r\n                var _col_defs = [], _firstNode = $scope.treeData[0],\r\n                    _regex                     = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\r\n                    _keys                      = Object.keys(_firstNode),\r\n                    i, _len;\r\n                // Auto get first field with type is string;\r\n                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\r\n                        _col_defs.push(\r\n                            {\r\n                                field: _keys[i]\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                $scope.colDefinitions = _col_defs;\r\n            }\r\n        }\r\n\r\n        function do_f(root, node, parent, parent_real, level, visible, index) {\r\n\r\n            if (typeof node !== 'object') {\r\n                return 0;\r\n            }\r\n\r\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n            if (!angular.isArray(node.__children__)) {\r\n                node.__children__ = [];\r\n            }\r\n\r\n            node.__parent_real__ = parent_real;\r\n            node.__parent__      = parent;\r\n            _len                 = node.__children__.length;\r\n\r\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                node.__expanded__ = level < $scope.expandLevel;\r\n            }\r\n\r\n            if (_len === 0) {\r\n                _icon = -1;\r\n            } else {\r\n                if (node.__expanded__) {\r\n                    _icon = 1;\r\n                } else {\r\n                    _icon = 0;\r\n                }\r\n            }\r\n\r\n            // Insert item vertically\r\n            _index_real         = root.length;\r\n            node.__index__      = index;\r\n            node.__index_real__ = _index_real;\r\n            node.__level__      = level;\r\n            node.__icon__       = _icon;\r\n            node.__icon_class__ = $scope.$class.icon[_icon];\r\n            node.__visible__    = !!visible;\r\n\r\n            if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                node.__uid__ = '' + Math.random();\r\n            }\r\n\r\n            _hashKey = $scope.getHash(node);\r\n\r\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                node.__hashKey__ = _hashKey;\r\n            }\r\n\r\n            root.push(node);\r\n\r\n            // Check node children\r\n            _dept = 1;\r\n            if (_len > 0) {\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _dept += do_f(\r\n                        root,\r\n                        node.__children__[_i],\r\n                        node[$scope.primary_key],\r\n                        _index_real,\r\n                        level + 1,\r\n                        visible && node.__expanded__,\r\n                        _i\r\n                    );\r\n                }\r\n            }\r\n\r\n            node.__dept__ = _dept;\r\n\r\n            return _dept;\r\n        }\r\n\r\n        function init_data(data) {\r\n\r\n            // clear memory\r\n            if (angular.isDefined($scope.tree_nodes)) {\r\n                delete $scope.tree_nodes;\r\n            }\r\n\r\n            $scope.tree_nodes = data;\r\n            return data;\r\n        }\r\n\r\n        function reload_data(oData) {\r\n            var _data,\r\n                _len,\r\n                _tree_nodes = [];\r\n            if (angular.isDefined(oData)) {\r\n                if (!angular.isArray(oData) || oData.length === 0) {\r\n                    return init_data([]);\r\n                } else {\r\n                    _data = oData;\r\n                }\r\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\r\n                return init_data([]);\r\n            } else {\r\n                _data = $scope.treeData;\r\n            }\r\n\r\n            if (!$attrs.expandOn) {\r\n                getExpandOn();\r\n            }\r\n\r\n            if (!$attrs.columnDefs) {\r\n                getColDefs();\r\n            }\r\n\r\n            if (angular.isDefined($scope.orderBy)) {\r\n                if (!angular.isFunction(_fnInitOrderBy)) {\r\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                }\r\n\r\n                if (angular.isFunction(_fnInitOrderBy)) {\r\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\r\n                }\r\n            }\r\n\r\n            if (angular.isDefined($scope.filter)) {\r\n                if (!angular.isFunction(_fnInitFilter)) {\r\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                }\r\n\r\n                if (angular.isFunction(_fnInitFilter)) {\r\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\r\n                }\r\n            }\r\n\r\n            _len = _data.length;\r\n            if (_len > 0) {\r\n                var _i,\r\n                    _deptTotal = 0;\r\n\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                }\r\n\r\n            }\r\n\r\n            init_data(_tree_nodes);\r\n\r\n            return _tree_nodes;\r\n        }\r\n    }\r\n\r\n    function fnCompile(tElement) {\r\n\r\n        var $_Template = '',\r\n            _element   = tElement.html().trim();\r\n\r\n        if (_element.length > 0) {\r\n            $_Template = _element;\r\n            tElement.html('');\r\n        }\r\n\r\n        return function fnPost(scope, element, attrs) {\r\n\r\n            if (attrs.enableDrag) {\r\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                if (angular.isFunction(_fnInitDrag)) {\r\n                    _fnInitDrag(scope, element, $window, $document);\r\n                }\r\n            }\r\n\r\n            // kick out $digest\r\n            element.ready(function () {\r\n                // apply Template\r\n                function checkTreeTable(template, scope) {\r\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\r\n                        attrInclude;\r\n\r\n                    scope.isTable = null;\r\n                    if (elemNode) {\r\n                        elemNode    = angular.element(elemNode);\r\n                        attrInclude = elemNode.attr('ng-include');\r\n                    } else {\r\n                        return;\r\n                    }\r\n\r\n                    if (attrInclude) {\r\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\r\n                        if (typeof treeInclude === 'string') {\r\n                            return $http.get(\r\n                                treeInclude,\r\n                                {cache: $templateCache}\r\n                            ).then(function (response) {\r\n                                    var data          = response.data || '';\r\n                                    data              = data.trim();\r\n                                    //scope.templateNode = data;\r\n                                    var tempDiv       = document.createElement('div');\r\n                                    tempDiv.innerHTML = data;\r\n                                    tempDiv           = angular.element(tempDiv);\r\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\r\n                                }\r\n                            );\r\n                        }\r\n                    } else {\r\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\r\n                        //scope.templateNode = elemNode.html();\r\n                    }\r\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\r\n                    //elemNode.html('');\r\n                }\r\n\r\n                //scope.$watch(tableDataLoaded, transformTable);\r\n                /*\r\n                 function tableDataLoaded(elem) {\r\n                 // first cell in the tbody exists when data is loaded but doesn't have a width\r\n                 // until after the table is transformed\r\n                 var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\r\n                 return firstCell && !firstCell.style.width;\r\n                 }\r\n\r\n                 function transformTable(elem, attrs) {\r\n                 // reset display styles so column widths are correct when measured below\r\n                 angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\r\n\r\n                 // wrap in $timeout to give table a chance to finish rendering\r\n                 $timeout(function () {\r\n                 // set widths of columns\r\n                 angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\r\n\r\n                 var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\r\n                 var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\r\n\r\n                 var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\r\n                 if (tdElems) {\r\n                 tdElems.style.width = columnWidth + 'px';\r\n                 }\r\n                 if (thElem) {\r\n                 thElem.style.width = columnWidth + 'px';\r\n                 }\r\n                 if (tfElems) {\r\n                 tfElems.style.width = columnWidth + 'px';\r\n                 }\r\n                 });\r\n\r\n                 // set css styles on thead and tbody\r\n                 angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\r\n\r\n                 angular.element(elem.querySelectorAll('tbody')).css({\r\n                 'display':  'block',\r\n                 'height':   attrs.tableHeight || 'inherit',\r\n                 'overflow': 'auto'\r\n                 });\r\n\r\n                 // reduce width of last column by width of scrollbar\r\n                 var tbody          = elem.querySelector('tbody');\r\n                 var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\r\n                 if (scrollBarWidth > 0) {\r\n                 // for some reason trimming the width by 2px lines everything up better\r\n                 scrollBarWidth -= 2;\r\n                 var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\r\n                 lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\r\n                 }\r\n                 });\r\n                 }*/\r\n                var promiseCheck;\r\n                if ($_Template.length > 0) {\r\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\r\n                    if (angular.isObject(promiseCheck)) {\r\n                        promiseCheck.then(function () {\r\n                            element.append($compile($_Template)(scope));\r\n                        });\r\n                    } else {\r\n                        element.append($compile($_Template)(scope));\r\n                    }\r\n                } else {\r\n                    $http.get(\r\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                        {cache: $templateCache}\r\n                    ).then(function (response) {\r\n                            var data     = response.data || '';\r\n                            data         = angular.element(data.trim());\r\n                            promiseCheck = checkTreeTable(data, scope);\r\n                            if (angular.isObject(promiseCheck)) {\r\n                                promiseCheck.then(function () {\r\n                                    element.append($compile(data)(scope));\r\n                                });\r\n                            } else {\r\n                                element.append($compile(data)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            })\r\n        };\r\n    }\r\n}\r\n\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey, callback) {\r\n                callback = typeof callback === 'function' ? callback : function () {\r\n                };\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree     = [],\r\n                    rootIds  = [],\r\n                    item     = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len      = data.length,\r\n                    i        = 0;\r\n\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    callback(item);\r\n                    _primary           = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                }\r\n                i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    callback(item);\r\n                    _primary           = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId           = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent) {\r\n                            if (parent.__children__) {\r\n                                parent.__children__.push(item);\r\n                            } else {\r\n                                parent.__children__ = [item];\r\n                            }\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function access_child(data, containKey, callback) {\r\n                callback  = typeof callback === 'function' ? callback : function () {\r\n                };\r\n                var _tree = [],\r\n                    _i,\r\n                    _len  = data ? data.length : 0,\r\n                    _copy, _child;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _copy = angular.copy(data[_i]);\r\n                    callback(_copy);\r\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\r\n                        _child = access_child(_copy[containKey], containKey, callback);\r\n                        delete _copy[containKey];\r\n                        _copy.__children__ = _child;\r\n                    }\r\n                    _tree.push(_copy);\r\n                }\r\n                return _tree;\r\n            }\r\n        };\r\n\r\n        return _$initConvert;\r\n    });\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDHelper', [\r\n        '$document', '$window',\r\n        function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node   = scope.getData(),\r\n                        _tree   = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    return {\r\n                        offsetX:  e.pageX - this.offset(target).left,\r\n                        offsetY:  e.pageY - this.offset(target).top,\r\n                        startX:   e.pageX,\r\n                        lastX:    e.pageX,\r\n                        startY:   e.pageY,\r\n                        lastY:    e.pageY,\r\n                        nowX:     0,\r\n                        nowY:     0,\r\n                        distX:    0,\r\n                        distY:    0,\r\n                        dirAx:    0,\r\n                        dirX:     0,\r\n                        dirY:     0,\r\n                        lastDirX: 0,\r\n                        lastDirY: 0,\r\n                        distAxX:  0,\r\n                        distAxY:  0\r\n                    };\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx  = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr || 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n\r\n            return _$helper;\r\n        }]\r\n    );\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDPlugin', [\r\n        '$injector',\r\n        function ($injector) {\r\n            var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n            return _fnget;\r\n        }]\r\n    );\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDTemplate', [\r\n        '$templateCache',\r\n        function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath     = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath     = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes       = {},\r\n                temp,\r\n                _$init       = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n    );\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\r\n\r\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\r\n\r\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\r\n\r\n    var viewport      = null,\r\n        isUpdating    = false,\r\n        isRender      = false,\r\n        updateAgain   = false,\r\n        viewportRect,\r\n        items         = [],\r\n        nodeTemplate,\r\n        updateTimeout,\r\n        renderTime,\r\n        $initViewport = {\r\n            setViewport:   setViewport,\r\n            getViewport:   getViewport,\r\n            add:           add,\r\n            setTemplate:   setTemplate,\r\n            getItems:      getItems,\r\n            updateDelayed: updateDelayed\r\n        },\r\n        eWindow       = angular.element($window);\r\n\r\n    eWindow.on('load resize scroll', updateDelayed);\r\n\r\n    return $initViewport;\r\n\r\n    function update() {\r\n\r\n        viewportRect = {\r\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\r\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\r\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\r\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\r\n        };\r\n\r\n        if (isUpdating || isRender) {\r\n            updateAgain = true;\r\n            return;\r\n        }\r\n        isUpdating = true;\r\n\r\n        recursivePromise();\r\n    }\r\n\r\n    function recursivePromise() {\r\n        if (isRender) {\r\n            return;\r\n        }\r\n\r\n        var number = number > 0 ? number : items.length, item;\r\n\r\n        if (number > 0) {\r\n            item = items[0];\r\n\r\n            isRender   = true;\r\n            renderTime = $timeout(function () {\r\n                //item.element.html(nodeTemplate);\r\n                //$compile(item.element.contents())(item.scope);\r\n\r\n                items.splice(0, 1);\r\n                isRender = false;\r\n                number--;\r\n                $timeout.cancel(renderTime);\r\n                recursivePromise();\r\n            }, 0);\r\n\r\n        } else {\r\n            isUpdating = false;\r\n            if (updateAgain) {\r\n                updateAgain = false;\r\n                update();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Check if a point is inside specified bounds\r\n     * @param x\r\n     * @param y\r\n     * @param bounds\r\n     * @returns {boolean}\r\n     */\r\n    function pointIsInsideBounds(x, y, bounds) {\r\n        return x >= bounds.left &&\r\n            y >= bounds.top &&\r\n            x <= bounds.left + bounds.width &&\r\n            y <= bounds.top + bounds.height;\r\n    }\r\n\r\n    /**\r\n     * @name setViewport\r\n     * @desciption Set the viewport element\r\n     * @param element\r\n     */\r\n    function setViewport(element) {\r\n        viewport = element;\r\n    }\r\n\r\n    /**\r\n     * Return the current viewport\r\n     * @returns {*}\r\n     */\r\n    function getViewport() {\r\n        return viewport;\r\n    }\r\n\r\n    /**\r\n     * trigger an update\r\n     */\r\n    function updateDelayed() {\r\n        $timeout.cancel(updateTimeout);\r\n        updateTimeout = $timeout(function () {\r\n            update();\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * Add listener for event\r\n     * @param element\r\n     * @param callback\r\n     */\r\n    function add(scope, element) {\r\n        updateDelayed();\r\n        items.push({\r\n            element: element,\r\n            scope:   scope\r\n        });\r\n    }\r\n\r\n    function setTemplate(scope, template) {\r\n        nodeTemplate = template;\r\n    }\r\n\r\n    /**\r\n     * Get list of items\r\n     * @returns {Array}\r\n     */\r\n    function getItems() {\r\n        return items;\r\n    }\r\n}\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            return fnInitFilter;\r\n\r\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                if (!angular.isFunction(fnBefore)) {\r\n                    return null;\r\n                }\r\n\r\n                var _i, _len, _nodes,\r\n                    _nodePassed   = fnBefore(options, node),\r\n                    _childPassed  = false,\r\n                    _filter_index = options.filter_index;\r\n\r\n                if (angular.isDefined(node[fieldChild])) {\r\n                    _nodes = node[fieldChild];\r\n                    _len   = _nodes.length;\r\n\r\n                    options.filter_index = 0;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _childPassed = for_all_descendants(\r\n                            options,\r\n                            _nodes[_i],\r\n                            fieldChild,\r\n                            fnBefore,\r\n                            fnAfter,\r\n                            _nodePassed || parentPassed\r\n                        ) || _childPassed;\r\n                    }\r\n\r\n                    // restore filter_index of node\r\n                    options.filter_index = _filter_index;\r\n                }\r\n\r\n                if (angular.isFunction(fnAfter)) {\r\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                }\r\n\r\n                return _nodePassed || _childPassed;\r\n            }\r\n\r\n            /**\r\n             * Check data with callback\r\n             * @param {string|object|function|regex} callback\r\n             * @param {*} data\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnCheck(callback, data) {\r\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\r\n                    return null;\r\n                }\r\n\r\n                if (angular.isFunction(callback)) {\r\n                    return callback(data, $filter);\r\n                } else {\r\n                    if (typeof callback === 'boolean') {\r\n                        data = !!data;\r\n                        return data === callback;\r\n                    } else if (angular.isDefined(callback)) {\r\n                        try {\r\n                            var _regex = new RegExp(callback);\r\n                            return _regex.test(data);\r\n                        }\r\n                        catch (err) {\r\n                            if (typeof data === 'string') {\r\n                                return data.indexOf(callback) > -1;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\r\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\r\n             *\r\n             * @param node\r\n             * @param condition\r\n             * @param isAnd\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnProccess(node, condition, isAnd) {\r\n                if (angular.isArray(condition)) {\r\n                    return for_each_filter(node, condition, isAnd);\r\n                } else {\r\n                    var _key      = condition.field,\r\n                        _callback = condition.callback,\r\n                        _iO, _keysO, _lenO;\r\n\r\n                    if (_key === '_$') {\r\n                        _keysO = Object.keys(node);\r\n                        _lenO  = _keysO.length;\r\n                        for (_iO = 0; _iO < _lenO; _iO++) {\r\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else if (angular.isDefined(node[_key])) {\r\n                        return _fnCheck(_callback, node[_key]);\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {object} node\r\n             * @param {array} conditions Array `conditions`\r\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\r\n             * @returns {null|boolean}\r\n             */\r\n            function for_each_filter(node, conditions, isAnd) {\r\n                var i, len = conditions.length || 0, passed = false;\r\n                if (len === 0) {\r\n                    return null;\r\n                }\r\n\r\n                for (i = 0; i < len; i++) {\r\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                        passed = true;\r\n                        // if condition `or` then return;\r\n                        if (!isAnd) {\r\n                            return true;\r\n                        }\r\n                    } else {\r\n\r\n                        // if condition `and` and result in fnProccess = false then return;\r\n                        if (isAnd) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return passed;\r\n            }\r\n\r\n            /**\r\n             * Will call _fnAfter to clear data no need\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @param {boolean} isNodePassed\r\n             * @param {boolean} isChildPassed\r\n             * @param {boolean} isParentPassed\r\n             * @private\r\n             */\r\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                if (isNodePassed === true) {\r\n                    node.__filtered__         = true;\r\n                    node.__filtered_visible__ = true;\r\n                    node.__filtered_index__   = options.filter_index++;\r\n                    return; //jmp\r\n                } else if (isChildPassed === true && options.showParent === true\r\n                    || isParentPassed === true && options.showChild === true) {\r\n                    node.__filtered__         = false;\r\n                    node.__filtered_visible__ = true;\r\n                    node.__filtered_index__   = options.filter_index++;\r\n                    return; //jmp\r\n                }\r\n\r\n                // remove attr __filtered__\r\n                delete node.__filtered__;\r\n                delete node.__filtered_visible__;\r\n                delete node.__filtered_index__;\r\n            }\r\n\r\n            /**\r\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\r\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\r\n             *\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnBefore(options, node) {\r\n                if (options.filter.length === 0) {\r\n                    return true;\r\n                } else {\r\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnBeforeClear` will called when `for_all_descendants` of `node` checking.\r\n             * Alway false to Clear Filter empty\r\n             *\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnBeforeClear(options, node) {\r\n                return false;\r\n            }\r\n\r\n            /**\r\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\r\n             *\r\n             * @param {object|array} filters\r\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\r\n             * @private\r\n             */\r\n            function _fnConvert(filters) {\r\n                var _iF, _lenF, _keysF,\r\n                    _filter,\r\n                    _state;\r\n                // convert filter object to array filter\r\n                if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                    _keysF  = Object.keys(filters);\r\n                    _lenF   = _keysF.length;\r\n                    _filter = [];\r\n\r\n                    if (_lenF > 0) {\r\n                        for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                continue;\r\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                _state = filters[_keysF[_iF]];\r\n                            } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                _state = _fnConvert(filters[_keysF[_iF]]);\r\n                            } else {\r\n                                _state = {\r\n                                    field:    _keysF[_iF],\r\n                                    callback: filters[_keysF[_iF]]\r\n                                };\r\n                            }\r\n                            _filter.push(_state);\r\n                        }\r\n                    }\r\n                    _state = null;\r\n                    return _filter;\r\n                }\r\n                else {\r\n                    return filters;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\r\n             * @constructor\r\n             * @param {object|array} treeData\r\n             * @param {object|array} filters\r\n             * @param {object} options\r\n             * @param {string} keyChild\r\n             * @returns {array} Return `treeData` or `treeData` with `filter`\r\n             * @private\r\n             */\r\n            function fnInitFilter(treeData, filters, options, keyChild) {\r\n                if (!angular.isArray(treeData)\r\n                    || treeData.length === 0) {\r\n                    return treeData;\r\n                }\r\n\r\n                var _i, _len,\r\n                    _filter;\r\n\r\n                _filter = _fnConvert(filters);\r\n                if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                    || _filter.length === 0) {\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            options,\r\n                            treeData[_i],\r\n                            keyChild || '__children__',\r\n                            _fnBeforeClear, _fnAfter\r\n                        );\r\n                    }\r\n                    return treeData;\r\n                }\r\n\r\n                options.filter       = _filter;\r\n                options.filter_index = 0;\r\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                    for_all_descendants(\r\n                        options,\r\n                        treeData[_i],\r\n                        keyChild || '__children__',\r\n                        _fnBefore, _fnAfter\r\n                    );\r\n                }\r\n\r\n                return treeData;\r\n            }\r\n\r\n        }]\r\n    );\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDOrderBy', [\r\n        '$filter',\r\n        function ($filter) {\r\n            var _fnOrderBy          = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len   = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder            = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain             = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    return _fnOrder(treeData, orderBy);\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n    );\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            function _fnPlaceHolder(e, $params) {\r\n                if ($params.placeElm) {\r\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function _fnDragStart(e, $params) {\r\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                    // disable right click\r\n                    return;\r\n                }\r\n\r\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\r\n                    return;\r\n                }\r\n\r\n                // the element which is clicked.\r\n                var eventElm   = angular.element(e.target),\r\n                    eventScope = eventElm.scope();\r\n                if (!eventScope || !eventScope.$type) {\r\n                    return;\r\n                }\r\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                //     return;\r\n                // }\r\n\r\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                    return;\r\n                }\r\n\r\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                    dragScope,\r\n                    _$scope         = $params.$scope;\r\n                if (eventElmTagName === 'input'\r\n                    || eventElmTagName === 'textarea'\r\n                    || eventElmTagName === 'button'\r\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                    return;\r\n                }\r\n                // check if it or it's parents has a 'data-nodrag' attribute\r\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                        return;\r\n                    }\r\n                    eventElm = eventElm.parent();\r\n                }\r\n\r\n                e.uiTreeDragging = true; // stop event bubbling\r\n                if (e.originalEvent) {\r\n                    e.originalEvent.uiTreeDragging = true;\r\n                }\r\n                e.preventDefault();\r\n\r\n                dragScope = eventScope.getScopeNode();\r\n\r\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\r\n                    return;\r\n                }\r\n\r\n                $params.firstMoving = true;\r\n                _$scope.setDragging($params.dragInfo);\r\n\r\n                var eventObj = $TreeDnDHelper.eventObj(e);\r\n                $params.pos  = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                if (dragScope.isTable) {\r\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                        .addClass(_$scope.$class.tree)\r\n                        .addClass(_$scope.$class.drag)\r\n                        .addClass(_$scope.$tree_class);\r\n                } else {\r\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                        .addClass(_$scope.$class.drag)\r\n                        .addClass('tree-dnd-nodes')\r\n                        .addClass(_$scope.$tree_class);\r\n                }\r\n\r\n                $params.dragElm.css(\r\n                    {\r\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                        'z-index': 9995\r\n                    }\r\n                );\r\n\r\n                $params.offsetEdge = 0;\r\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\r\n                    _scope         = dragScope,\r\n                    _element       = _scope.$element,\r\n                    _clone,\r\n                    _needCollapse  = !!_$scope.enabledCollapse,\r\n                    _copied        = false,\r\n                    _tbody,\r\n                    _frag;\r\n\r\n                if (_scope.isTable) {\r\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                    _tbody             = angular.element(document.createElement('tbody'));\r\n                    _frag              = angular.element(document.createDocumentFragment());\r\n\r\n                    _$scope.for_all_descendants(\r\n                        $params.dragInfo.node, function (_node, _parent) {\r\n                            _scope   = _$scope.getScope(_node);\r\n                            _element = _scope && _scope.$element;\r\n                            if (_scope && _element) {\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _$scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _frag.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n\r\n                                    // hide if have status Move;\r\n                                    if (_$scope.enabledMove && _$scope.$class.hidden &&\r\n                                        (!_parent || _node.__visible__ || _parent.__visible__ && _parent.__expanded__)) {\r\n                                        _element.addClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            }\r\n                            // skip children of node not expand.\r\n                            return _copied || _node.__visible__ === false || _node.__expanded__ === false;\r\n\r\n                        }, null, !_needCollapse\r\n                    );\r\n                    _tbody.append(_frag);\r\n                    $params.dragElm.append(_tbody);\r\n                } else {\r\n\r\n                    _clone = _element.clone();\r\n                    if (_needCollapse) {\r\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\r\n                    }\r\n\r\n                    // hide if have status Move;\r\n                    $params.dragElm.append(_clone);\r\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                        _element.addClass(_$scope.$class.hidden);\r\n                    }\r\n                }\r\n\r\n                $params.dragElm.css(\r\n                    {\r\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                            $params.offsetEdge + 1,\r\n                            true,\r\n                            true\r\n                        ) + 'px',\r\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                    }\r\n                );\r\n                // moving item with descendant\r\n                $params.$document.find('body').append($params.dragElm);\r\n                if (_$scope.$callbacks.droppable()) {\r\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                    if (dragScope.isTable) {\r\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                    }\r\n\r\n                    $params.placeElm.css('width', _width);\r\n                }\r\n\r\n                _$scope.showPlace();\r\n                _$scope.targeting = true;\r\n\r\n                if (_$scope.enabledStatus) {\r\n                    _$scope.refreshStatus();\r\n                    _$scope.setPositionStatus(e);\r\n                }\r\n\r\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                $params.document_height = Math.max(\r\n                    $params.body.scrollHeight,\r\n                    $params.body.offsetHeight,\r\n                    $params.html.clientHeight,\r\n                    $params.html.scrollHeight,\r\n                    $params.html.offsetHeight\r\n                );\r\n\r\n                $params.document_width = Math.max(\r\n                    $params.body.scrollWidth,\r\n                    $params.body.offsetWidth,\r\n                    $params.html.clientWidth,\r\n                    $params.html.scrollWidth,\r\n                    $params.html.offsetWidth\r\n                );\r\n            }\r\n\r\n            function _fnDragMove(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (!$params.dragStarted) {\r\n                    if (!$params.dragDelaying) {\r\n                        $params.dragStarted = true;\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStart($params.dragInfo);\r\n                            }\r\n                        );\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if ($params.dragElm) {\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if (topElmPos + 10 > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if (leftElmPos + 10 > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            ) + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        isChanged  = true,\r\n                        isVeritcal = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info      = $params.dragInfo,\r\n                        _move      = _info.move,\r\n                        _drag      = _info.node,\r\n                        _drop      = _info.drop,\r\n                        treeScope  = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder   = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                         elementFromPoint() twice to make sure IE8 returns the correct value\r\n                         $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\r\n                            // Not allowed Drop Item\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target   = _info.target;\r\n\r\n                            if (_info.target !== treeScope) {\r\n                                // Replace by place-holder new\r\n                                _target.hidePlace();\r\n                                _target.targeting   = false;\r\n                                treeScope.targeting = true;\r\n\r\n                                _info.target     = treeScope;\r\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                _target   = null;\r\n                                isSwapped = true;\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVeritcal  = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos    = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVeritcal) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n                            if (angular.isUndefinedOrNull(targetElm)) {\r\n                                return;\r\n                            }\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !targetScope.isTable) {\r\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\r\n                            } else {\r\n                                if (targetScope.isTable) {\r\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos    = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos    = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos    = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                            _target.__children__.length - 1 < _move.pos ||\r\n                                            _info.drag === _info.target &&\r\n                                            _target.__index_real__ === _drag.__parent_real__ &&\r\n                                            _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\r\n                                    ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos    = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                    ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move    = _move;\r\n                        _info.drop    = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope   = targetScope;\r\n\r\n                        if (targetScope.isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop  = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope  = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            function _fnDragEnd(e, $params) {\r\n                e.preventDefault();\r\n                if ($params.dragElm) {\r\n                    var _passed  = false,\r\n                        _$scope  = $params.$scope,\r\n                        _scope   = _$scope.getScope($params.dragInfo.node),\r\n                        _element = _scope.$element;\r\n\r\n                    _$scope.$safeApply(\r\n                        function () {\r\n                            _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                        }\r\n                    );\r\n\r\n                    // rollback all\r\n                    if (_scope.isTable) {\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node, _parent) {\r\n                                _scope   = _$scope.getScope(_node);\r\n                                _element = _scope && _scope.$element;\r\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                                return _node.__visible__ === false || _node.__expanded__ === false\r\n                            }, null, true\r\n                        );\r\n                    } else {\r\n                        if (_$scope.$class.hidden) {\r\n                            _element.removeClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.remove();\r\n                    $params.dragElm = null;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.hideStatus();\r\n                    }\r\n\r\n                    if (_$scope.$$apply) {\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                var _status = _$scope.$callbacks.dropped(\r\n                                    $params.dragInfo,\r\n                                    _passed\r\n                                );\r\n\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                                clearData();\r\n                            }\r\n                        );\r\n                    } else {\r\n                        _fnBindDrag($params);\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, false);\r\n                                clearData();\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                }\r\n\r\n                function clearData() {\r\n                    $params.dragInfo.target.hidePlace();\r\n                    $params.dragInfo.target.targeting = false;\r\n\r\n                    $params.dragInfo = null;\r\n                    _$scope.$$apply  = false;\r\n                    _$scope.setDragging(null);\r\n                }\r\n\r\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n            }\r\n\r\n            function _fnDragStartEvent(e, $params) {\r\n                if ($params.$scope.$callbacks.draggable()) {\r\n                    _fnDragStart(e, $params);\r\n                }\r\n            }\r\n\r\n            function _fnBindDrag($params) {\r\n                $params.element.bind(\r\n                    'touchstart mousedown', function (e) {\r\n                        $params.dragDelaying = true;\r\n                        $params.dragStarted  = false;\r\n                        _fnDragStartEvent(e, $params);\r\n                        $params.dragTimer = $timeout(\r\n                            function () {\r\n                                $params.dragDelaying = false;\r\n                            }, $params.$scope.dragDelay\r\n                        );\r\n                    }\r\n                );\r\n\r\n                $params.element.bind(\r\n                    'touchend touchcancel mouseup', function () {\r\n                        $timeout.cancel($params.dragTimer);\r\n                    }\r\n                );\r\n            }\r\n\r\n            function _fnKeydownHandler(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (e.keyCode === 27) {\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.hideStatus();\r\n                    }\r\n\r\n                    _$scope.$$apply = false;\r\n                    _fnDragEnd(e, $params);\r\n                } else {\r\n                    if (_$scope.enabledHotkey && e.shiftKey) {\r\n                        _$scope.enableMove(true);\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\r\n                            _element = _scope.$element;\r\n\r\n                        if (_scope.isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node, _parent) {\r\n                                    _scope   = _$scope.getScope(_node);\r\n                                    _element = _scope && _scope.$element;\r\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                    return _node.__visible__ === false || _node.__expanded__ === false\r\n\r\n                                }, null, true\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.addClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _fnKeyupHandler(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                    _$scope.enableMove(false);\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                    }\r\n\r\n                    if (!$params.dragInfo) {\r\n                        return;\r\n                    }\r\n\r\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\r\n                        _element = _scope.$element;\r\n\r\n                    if (_scope.isTable) {\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node, _parent) {\r\n                                _scope   = _$scope.getScope(_node);\r\n                                _element = _scope && _scope.$element;\r\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                                return _node.__visible__ === false || _node.__expanded__ === false\r\n                            }, null, true\r\n                        );\r\n                    } else {\r\n                        if (_$scope.$class.hidden) {\r\n                            _element.removeClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _$init(scope, element, $window, $document) {\r\n                var $params        = {\r\n                        hasTouch:        'ontouchstart' in window,\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params);\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                    keydownHandler = function (e) {\r\n                        return _fnKeydownHandler(e, $params);\r\n                    },\r\n                    keyupHandler   = function (e) {\r\n                        return _fnKeyupHandler(e, $params);\r\n                    };\r\n\r\n                scope.dragEnd = function (e) {\r\n                    $params.dragEnd(e);\r\n                };\r\n\r\n                $params.bindDrag();\r\n\r\n                angular.element($window.document.body).bind('keydown', keydownHandler);\r\n                angular.element($window.document.body).bind('keyup', keyupHandler);\r\n                //unbind handler that retains scope\r\n                scope.$on(\r\n                    '$destroy', function () {\r\n                        angular.element($window.document.body).unbind('keydown', keydownHandler);\r\n                        angular.element($window.document.body).unbind('keyup', keyupHandler);\r\n                        if (scope.statusElm) {\r\n                            scope.statusElm.remove();\r\n                        }\r\n\r\n                        if (scope.placeElm) {\r\n                            scope.placeElm.remove();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            return _$init;\r\n        }\r\n    ]);\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len;\r\n\r\n        function fnSetCollapse(node) {\r\n            node.__expanded__ = false;\r\n        }\r\n\r\n        function fnSetExpand(node) {\r\n            node.__expanded__ = true;\r\n        }\r\n\r\n        function _$init(scope) {\r\n            var n, tree = {\r\n                //selected_node:        null,\r\n                for_all_descendants:  scope.for_all_descendants,\r\n                select_node:          function (node) {\r\n                    if (!node) {\r\n                        if (this.selected_node) {\r\n                            delete this.selected_node.__selected__;\r\n                        }\r\n                        this.selected_node = null;\r\n                        if (angular.isFunction(this.on_select)) {\r\n                            this.on_select(node);\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                    if (node !== this.selected_node) {\r\n                        if (this.selected_node) {\r\n                            delete this.selected_node.__selected__;\r\n                        }\r\n                        node.__selected__  = true;\r\n                        this.selected_node = node;\r\n                        this.expand_all_parents(node);\r\n                        if (angular.isFunction(this.on_select)) {\r\n                            this.on_select(node);\r\n                        }\r\n                    }\r\n\r\n                    return node;\r\n                },\r\n                deselect_node:        function () {\r\n                    _target = null;\r\n                    if (this.selected_node) {\r\n                        delete this.selected_node.__selected__;\r\n                        _target            = this.selected_node;\r\n                        this.selected_node = null;\r\n\t\t\t\t\t\tif (angular.isFunction(this.on_select)) {\r\n                            this.on_select(null);\r\n                        }\r\n                    }\r\n                    return _target;\r\n                },\r\n                get_parent:           function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (node && node.__parent_real__ !== null) {\r\n                        return scope.tree_nodes[node.__parent_real__];\r\n                    }\r\n                    return null;\r\n                },\r\n                for_all_ancestors:    function (node, fn) {\r\n                    _parent = this.get_parent(node);\r\n                    if (_parent) {\r\n                        if (fn(_parent)) {\r\n                            return false;\r\n                        }\r\n\r\n                        return this.for_all_ancestors(_parent, fn);\r\n                    }\r\n                    return true;\r\n                },\r\n                expand_all_parents:   function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        this.for_all_ancestors(node, fnSetExpand);\r\n                    }\r\n                },\r\n                collapse_all_parents: function (node) {\r\n                    node = node || this.selected_node;\r\n                    if (angular.isObject(node)) {\r\n                        this.for_all_ancestors(node, fnSetCollapse);\r\n                    }\r\n                },\r\n\r\n                reload_data:                       function () {\r\n                    return scope.reload_data();\r\n                },\r\n                add_node:                          function (parent, new_node, index) {\r\n                    if (typeof index !== 'number') {\r\n                        if (parent) {\r\n                            parent.__children__.push(new_node);\r\n                            parent.__expanded__ = true;\r\n                        } else {\r\n                            scope.treeData.push(new_node);\r\n                        }\r\n                    } else {\r\n                        if (parent) {\r\n                            parent.__children__.splice(index, 0, new_node);\r\n                            parent.__expanded__ = true;\r\n                        } else {\r\n                            scope.treeData.splice(index, 0, new_node);\r\n                        }\r\n                    }\r\n                    return new_node;\r\n                },\r\n                add_node_root:                     function (new_node) {\r\n                    this.add_node(null, new_node);\r\n                    return new_node;\r\n                },\r\n                expand_all:                        function () {\r\n                    len = scope.treeData.length;\r\n                    for (i = 0; i < len; i++) {\r\n                        this.for_all_descendants(scope.treeData[i], fnSetExpand);\r\n                    }\r\n                },\r\n                collapse_all:                      function () {\r\n                    len = scope.treeData.length;\r\n                    for (i = 0; i < len; i++) {\r\n                        this.for_all_descendants(scope.treeData[i], fnSetCollapse);\r\n                    }\r\n                },\r\n                remove_node:                       function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        if (node.__parent_real__ !== null) {\r\n                            _parent = this.get_parent(node).__children__;\r\n                        } else {\r\n                            _parent = scope.treeData;\r\n                        }\r\n\r\n                        _parent.splice(node.__index__, 1);\r\n\r\n                        this.reload_data();\r\n\r\n                        if (this.selected_node === node) {\r\n                            this.selected_node = null;\r\n                        }\r\n                    }\r\n                },\r\n                expand_node:                       function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node) && node.__expanded__) {\r\n                        node.__expanded__ = true;\r\n                        return node;\r\n                    }\r\n                },\r\n                collapse_node:                     function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        node.__expanded__ = false;\r\n                        return node;\r\n                    }\r\n                },\r\n                get_selected_node:                 function () {\r\n                    return this.selected_node;\r\n                },\r\n                get_first_node:                    function () {\r\n                    len = scope.treeData.length;\r\n                    if (len > 0) {\r\n                        return scope.treeData[0];\r\n                    }\r\n\r\n                    return null;\r\n                },\r\n                get_children:                      function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    return node.__children__;\r\n                },\r\n                get_siblings:                      function (node) {\r\n                    node = node || this.selected_node;\r\n                    if (angular.isObject(node)) {\r\n                        _parent = this.get_parent(node);\r\n                        if (_parent) {\r\n                            _target = _parent.__children__;\r\n                        } else {\r\n                            _target = scope.treeData;\r\n                        }\r\n                        return _target;\r\n                    }\r\n                },\r\n                get_next_sibling:                  function (node) {\r\n                    node = node || this.selected_node;\r\n                    if (angular.isObject(node)) {\r\n                        _target = this.get_siblings(node);\r\n                        n       = _target.length;\r\n                        if (node.__index__ < n) {\r\n                            return _target[node.__index__ + 1];\r\n                        }\r\n                    }\r\n                },\r\n                get_prev_sibling:                  function (node) {\r\n                    node    = node || this.selected_node;\r\n                    _target = this.get_siblings(node);\r\n                    if (node.__index__ > 0) {\r\n                        return _target[node.__index__ - 1];\r\n                    }\r\n                },\r\n                get_first_child:                   function (node) {\r\n                    node = node || this.selected_node;\r\n                    if (angular.isObject(node)) {\r\n                        _target = node.__children__;\r\n                        if (_target && _target.length > 0) {\r\n                            return node.__children__[0];\r\n                        }\r\n                    }\r\n                    return null;\r\n                },\r\n                get_closest_ancestor_next_sibling: function (node) {\r\n                    node    = node || this.selected_node;\r\n                    _target = this.get_next_sibling(node);\r\n                    if (_target) {\r\n                        return _target;\r\n                    }\r\n\r\n                    _parent = this.get_parent(node);\r\n                    if (_parent) {\r\n                        return this.get_closest_ancestor_next_sibling(_parent);\r\n                    }\r\n\r\n                    return null;\r\n                },\r\n                get_next_node:                     function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        _target = this.get_first_child(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        } else {\r\n                            return this.get_closest_ancestor_next_sibling(node);\r\n                        }\r\n                    }\r\n                },\r\n                get_prev_node:                     function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        _target = this.get_prev_sibling(node);\r\n                        if (_target) {\r\n                            return this.get_last_descendant(_target);\r\n                        }\r\n\r\n                        _parent = this.get_parent(node);\r\n                        return _parent;\r\n                    }\r\n                },\r\n                get_last_descendant:               scope.getLastDescendant,\r\n                select_parent_node:                function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        _parent = this.get_parent(node);\r\n                        if (_parent) {\r\n                            return this.select_node(_parent);\r\n                        }\r\n                    }\r\n                },\r\n                select_first_node:                 function () {\r\n                    var firstNode = this.get_first_node();\r\n                    return this.select_node(firstNode);\r\n                },\r\n                select_next_sibling:               function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        _target = this.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return this.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_prev_sibling:               function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        _target = this.get_prev_sibling(node);\r\n                        if (_target) {\r\n                            return this.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_next_node:                  function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        _target = this.get_next_node(node);\r\n                        if (_target) {\r\n                            return this.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_prev_node:                  function (node) {\r\n                    node = node || this.selected_node;\r\n\r\n                    if (angular.isObject(node)) {\r\n                        _target = this.get_prev_node(node);\r\n                        if (_target) {\r\n                            return this.select_node(_target);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            angular.extend(scope.tree, tree);\r\n            return scope.tree;\r\n        }\r\n\r\n        return _$init;\r\n    });\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    ['$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            ['<table ng-class=\"$tree_class\">',\r\n             '    <thead>',\r\n             '  <tr>',\r\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\r\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\r\n             '        <\\/th>',\r\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\r\n             '         {{col.displayName || col.field}}',\r\n             '     </th>',\r\n             '    </tr>',\r\n             '    </thead>',\r\n             ' <tbody tree-dnd-nodes>',\r\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\r\n             '       ng-if=\"(node.__inited__ || node.__visible__)\"',\r\n             '       ng-click=\"onSelect(node)\" ',\r\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\r\n             '        <td tree-dnd-node-handle',\r\n             '          ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\r\n             '          ng-class=\"expandingProperty.cellClass\"',\r\n             '          compile=\"expandingProperty.cellTemplate\">',\r\n             '              <a data-nodrag>',\r\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\r\n             '                     class=\"tree-icon\"></i>',\r\n             '              </a>',\r\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\r\n             '        </td>',\r\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\r\n             '            compile=\"col.cellTemplate\">',\r\n             '            {{node[col.field]}}',\r\n             '        </td>',\r\n             '    </tr>',\r\n             '    </tbody>',\r\n             '</table>'].join('\\n')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n    function isUndefinedOrNull(val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    function isDefined(val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n})();"]}